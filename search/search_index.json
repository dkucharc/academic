{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Daniel Kucharczyk is an Assistant Professor with the Faculty od Pure and Applied Mathematics at Wroclaw University of Technology. </p> <p>His research interests include the application of mathematics and AI/ML methods in:</p> <ul> <li>quantitative finance,</li> <li>remote sensing.</li> </ul> <p>In addition, he has been actively working in the following fields:</p> <ul> <li>reproducible research,</li> <li>scientific computing,</li> <li>cloud software architecture.</li> </ul>"},{"location":"#contact-information","title":"Contact Information","text":"<ul> <li>Lecturer: dr in\u017c. Daniel Kucharczyk</li> <li>Email: daniel.kucharczyk[at]pwr.edu.pl</li> <li> <p>Office Hours:</p> <ul> <li>Mondays (1:15-2:00 PM CET, In-person)</li> <li>Tuesday (7:45-9:00 PM CET, In-person )</li> </ul> <p> Schedule a meeting</p> </li> <li> <p>Location: Hoene-Wro\u0144skiego Street 13c, 50-376 Wroc\u0142aw</p> </li> <li>Room: Building C-19, room A.4.18</li> <li></li> </ul>"},{"location":"blog/","title":"Machine Learning WUST 2025/2026","text":"<p>Welcome to the official blog for the Machine Learning course at Wroclaw University of Science and Technology.</p> <p>This course provides a comprehensive introduction to machine learning, covering both theoretical foundations and practical applications. Students will explore fundamental algorithms, modern techniques, and real-world implementations of machine learning systems.</p> <p>The course is hosted by the Faculty of Pure and Applied Mathematics (WMAT) at WUST and offers hands-on experience with industry-standard tools and frameworks.</p>"},{"location":"blog/_oold/2024_2025/projects/","title":"Final project","text":"<p>Dear Students!</p> <p>Please register your teams/projects by visiting https://classroom.github.com/a/4PocFZrV.</p> <p>After registering the team and getting access to the relevant (empty) repository, please perform the following tasks:</p> <ul> <li>Create <code>README.md</code> file containing basic information about the project, that is,</li> <li>Name of the project</li> <li>Short description</li> <li>Dataset to be used</li> <li>List of participants (including official emails from WUST)</li> </ul>","tags":["Machine Learning","Winter 2024/2025"]},{"location":"blog/_oold/2024_2025/week%231/","title":"Week #1 - Introduction to Machine Learning and Reproducible Research","text":"<p>In the second part of our first lecture, we will embark on an exciting journey into the world of machine learning (ML) and the critical importance of reproducible research.</p> <p>Learning objectives:</p> <ul> <li>Define and differentiate between Artificial Intelligence, Machine Learning, and Deep Learning.</li> <li>Identify and explain the main types of machine learning.</li> <li>Recognize common real-world applications of machine learning across various industries.</li> <li>Understand the basic workflow of a machine learning project, from data collection to model deployment using reproducible research principles.</li> </ul> <p>Laboratory https://classroom.github.com/a/3KtoTnWw</p>"},{"location":"blog/_oold/2024_2025/week%2310/","title":"Week #10 - Convolutional Neural Networks - Architecture Review","text":"<p>In today's lecture, we'll dive into Convolutional Neural Networks (CNNs) and their foundational role in computer vision. We'll explore how these specialized architectures leverage spatial relationships in visual data, their core building blocks, and how they've revolutionized image processing tasks from classification to segmentation.</p> <p>Learning objectives:</p> <ul> <li>Understand the fundamental principles of computer vision and how CNNs process visual information</li> <li>Master the key components of CNNs including convolutional layers, filters, pooling, and feature maps</li> <li>Explore how convolution operations detect hierarchical features from edges to complex patterns</li> <li>Learn common CNN architectures (LeNet, AlexNet, VGG, ResNet) and their historical significance</li> <li>Implement basic CNN operations and visualize learned features at different network depths</li> <li>Understand techniques for transfer learning and fine-tuning pre-trained CNN models</li> <li>Apply CNNs to core computer vision tasks: image classification, object detection, and segmentation</li> <li>Master practical considerations including data augmentation, batch normalization, and GPU acceleration</li> <li>Explore modern architectural innovations like skip connections, inception modules, and attention mechanisms</li> </ul> <p>Laboratory - TBA</p> <p>Resources - TBA</p>"},{"location":"blog/_oold/2024_2025/week%232/","title":"Week #2 - Linear Regression model","text":"<p>The review of the liner regression models in the context of machine learning and the usage of gradient descent method.</p> <p>Learning objectives:</p> <ul> <li>Understand and explain the objective function in linear regression, including its mathematical formulation and underlying rationale.</li> <li>Master both the closed-form solution and gradient descent approach for linear regression, including their mathematical derivations.</li> <li>Demonstrate proficiency in expressing linear regression solutions using matrix and vector operations.</li> <li>Explore how linear regression can model nonlinear relationships through the application of feature maps.</li> <li>Implement and compare closed-form and gradient descent solutions for linear regression using Python, emphasizing practical coding skills and algorithmic understanding.</li> </ul> <p>Laboratory</p> <p>https://classroom.github.com/a/5B0qAInA</p>"},{"location":"blog/_oold/2024_2025/week%233/","title":"Week #3 - Supervised Machine Learning","text":"<p>Learning objectives:</p> <ul> <li>Formalize the supervised machine learning setup, including understanding the concepts of training data, feature spaces, label spaces, and hypothesis functions.</li> <li>Comprehend different types of classification problems (binary, multi-class) and regression, along with their corresponding label spaces and feature vector characteristics.</li> <li>Understand the process of learning a hypothesis function, including selecting an appropriate algorithm and finding the best function within the hypothesis class using loss functions.</li> <li>Grasp the concept of generalization and the importance of train/test splits to address overfitting concerns, including the role of validation data in model development.</li> <li>Learn how to properly train and evaluate a classifier, including the formulas for minimizing training loss and calculating testing loss, as well as understanding how these relate to the true generalization loss.</li> </ul> <p>Laboratory</p> <p>https://classroom.github.com/a/AUoF7uBb</p>"},{"location":"blog/_oold/2024_2025/week%234/","title":"Week #4 - Model Selection and Hyperparameter Tuning","text":"<p>Learning objectives:</p> <ul> <li>Explain the importance of model selection and hyperparameter tuning in improving machine learning model performance, including the relationship between model complexity, bias, and variance</li> <li>Apply cross-validation techniques (k-fold, stratified, time-series) to evaluate model performance and select optimal models while avoiding overfitting</li> <li>Implement automated hyperparameter tuning methods such as Grid Search, Random Search, and Bayesian Optimization to efficiently find optimal model configurations</li> <li>Compare and evaluate different models using appropriate metrics (accuracy, precision, recall, F1-score, ROC-AUC) to make informed decisions about model selection based on the specific problem requirements and constraints</li> <li>Understand and apply regularization techniques (L1, L2, Elastic Net) to control model complexity and prevent overfitting during the model selection process</li> </ul> <p>Laboratory</p> <p>https://classroom.github.com/a/NhRt73hM</p>"},{"location":"blog/_oold/2024_2025/week%235/","title":"Week #5 - Introduction to Neural Networks","text":"<p>In today's lecture, we'll explore the foundational journey of neural networks, starting with the McCulloch-Pitts neuron model and progressing through Rosenblatt's perceptron, examining their capabilities with logic gates, understanding the XOR problem limitation, and discovering how these early challenges shaped the development of more advanced network architectures.</p> <p>Learning objectives: - Explain the historical significance of the McCulloch-Pitts neuron model (1943) and describe its basic components, including binary inputs, threshold activation, and binary output. - Compare and contrast the McCulloch-Pitts neuron with Rosenblatt's perceptron model, highlighting key advancements such as weighted connections and the learning algorithm. - Demonstrate how to solve linearly separable problems using the perceptron model through simple examples like AND and OR gates. - Analyze why the XOR problem cannot be solved by a single perceptron, using geometric visualization to explain the concept of linear separability. - Evaluate the limitations of early neural network models and explain how these limitations influenced the development of multilayer networks.</p> <p>Laboratory</p> <p>https://classroom.github.com/a/2BzNhU74</p>"},{"location":"blog/_oold/2024_2025/week%236/","title":"Week #6 - Multilayer Perceptrons","text":"<p>In today's lecture, we'll dive into multilayer perceptrons (MLPs), understanding how these more sophisticated neural networks overcome the limitations of single-layer models by utilizing hidden layers, backpropagation for learning, and their ability to solve complex non-linear problems that form the foundation of modern deep learning architectures.</p> <p>Learning objectives:</p> <ul> <li>Explain the architecture of multilayer perceptrons and how hidden layers enable non-linear function approximation</li> <li>Understand the mathematics behind the backpropagation algorithm and its role in training MLPs</li> <li>Explore the Universal Approximation Theorem and its implications for MLP capabilities and limitations</li> <li>Implement and train an MLP to solve the XOR problem, demonstrating the advantage over single-layer perceptrons</li> <li>Explore activation functions (sigmoid, tanh, ReLU) and their impact on network performance and training dynamics</li> <li>Apply MLPs to real-world classification and regression problems, including techniques for avoiding overfitting</li> </ul> <p>Laboratory - https://classroom.github.com/a/TsVyFAQ1</p> <p>Resources</p> <ul> <li>https://brilliant.org/wiki/artificial-neural-network/</li> <li>https://brilliant.org/wiki/feedforward-neural-networks/</li> <li>https://brilliant.org/wiki/backpropagation/</li> </ul>"},{"location":"blog/_oold/2024_2025/week%237/","title":"Week #7 - Efficient training of neural networks","text":"<p>In today's lecture, we'll explore essential techniques for efficiently training and evaluating neural networks, with a particular focus on understanding and interpreting learning curves. We'll examine how to diagnose common training issues, optimize the learning process, and develop intuition for model behavior through careful analysis of loss and accuracy metrics throughout the training cycle.</p> <p>Learning objectives:</p> <ul> <li>Master the interpretation of loss and accuracy curves to diagnose model learning behavior and common problems</li> <li>Understand the relationship between training and validation metrics, and their implications for model generalization</li> <li>Identify and address common training issues including underfitting, overfitting, and learning rate problems through curve analysis</li> <li>Learn practical techniques for monitoring and visualizing neural network training progress</li> <li>Explore methods for early stopping and learning rate scheduling based on performance metrics</li> <li>Apply diagnostic tools and visualization techniques to real-world model development scenarios</li> <li>Implement efficient training practices including batch normalization and gradient clipping</li> </ul> <p>Laboratory - TBA</p> <p>Resources - TBA</p>"},{"location":"blog/_oold/2024_2025/week%238/","title":"Week #8 - Autoencoders","text":"<p>In today's lecture, we'll explore autoencoders - a specialized neural network architecture that learns to compress data into a lower-dimensional representation and then reconstruct it. We'll examine how these self-supervised models work, their various architectures, and their practical applications in dimensionality reduction, denoising, and generative modeling.</p> <p>Learning objectives:</p> <ul> <li>Understand the fundamental architecture of autoencoders including encoder, latent space, and decoder components</li> <li>Explore different types of autoencoders (vanilla, denoising, variational, sparse) and their specific use cases</li> <li>Master the mathematics behind latent space representations and reconstruction loss</li> <li>Implement and train basic autoencoders for dimensionality reduction and feature learning</li> <li>Learn techniques for regularizing autoencoders to prevent memorization and encourage useful representations</li> <li>Analyze the quality of learned representations through reconstruction visualization and latent space exploration</li> <li>Apply autoencoders to practical tasks like image denoising, anomaly detection, and data compression</li> <li>Understand the connection between autoencoders and modern generative models like VAEs</li> </ul> <p>Laboratory - TBA</p> <p>Resources - TBA</p>"},{"location":"blog/_oold/2024_2025/week%239/","title":"Week #9 - Convolutional Neural Networks","text":"<p>In today's lecture, we'll dive into Convolutional Neural Networks (CNNs) and their foundational role in computer vision. We'll explore how these specialized architectures leverage spatial relationships in visual data, their core building blocks, and how they've revolutionized image processing tasks from classification to segmentation.</p> <p>Learning objectives:</p> <ul> <li>Understand the fundamental principles of computer vision and how CNNs process visual information</li> <li>Master the key components of CNNs including convolutional layers, filters, pooling, and feature maps</li> <li>Explore how convolution operations detect hierarchical features from edges to complex patterns</li> <li>Learn common CNN architectures (LeNet, AlexNet, VGG, ResNet) and their historical significance</li> <li>Implement basic CNN operations and visualize learned features at different network depths</li> <li>Understand techniques for transfer learning and fine-tuning pre-trained CNN models</li> <li>Apply CNNs to core computer vision tasks: image classification, object detection, and segmentation</li> <li>Master practical considerations including data augmentation, batch normalization, and GPU acceleration</li> <li> </li> <li>TBA</li> </ul> <p>Resources - TBA</p>"},{"location":"blog/_oold/2024_2025/week%239/#explore-modern-architectural-innovations-like-skip-connections-inception-modules-and-attention-mechanisms","title":"Explore modern architectural innovations like skip connections, inception modules, and attention mechanisms","text":"Laboratory"},{"location":"blog/2025/10/06/course-administrative-guide/","title":"Course Administrative Guide","text":"<p>The review of the course syllabus, grading policy, assignment schedule, and available resources to ensure everyone understands the expectations and logistics for our journey into machine learning and reproducible research.</p>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#course-overview","title":"Course Overview","text":"<ul> <li>Name: Machine Learning</li> <li>Prerequisites:<ul> <li>Fundamental understanding of linear algebra</li> <li>Basic understanding of multivariable calculus concepts and optimization algorithm</li> <li>Ability to write a non-trivial computer program in Python or equivalent</li> <li>Working knowledge of GitHub.</li> </ul> </li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#learning-objectives","title":"Learning Objectives","text":"","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#foundational-concepts","title":"Foundational Concepts","text":"<ul> <li>Explain the fundamental principles of machine learning and deep learning</li> <li>Describe the historical development of neural networks and deep learning</li> <li>Define and explain the function of a perceptron</li> <li>Illustrate the structure and operation of artificial neurons</li> <li>Differentiate between various activation functions and their use cases</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#neural-network-architectures","title":"Neural Network Architectures","text":"<ul> <li>Design and implement basic feedforward neural networks</li> <li>Analyze the architecture of Convolutional Neural Networks (CNNs) and their applications in image processing</li> <li>Examine the structure of Recurrent Neural Networks (RNNs) and their use in sequential data processing</li> <li>Evaluate the improvements offered by Long Short-Term Memory (LSTM) networks over traditional RNNs</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#training-and-optimization","title":"Training and Optimization","text":"<ul> <li>Explain the concept of backpropagation and its role in neural network training</li> <li>Compare and contrast different gradient descent methods (e.g., stochastic, mini-batch, batch)</li> <li>Implement various optimization algorithms to improve model performance</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#practical-implementation","title":"Practical Implementation","text":"<ul> <li>Utilize NumPy to build neural networks from scratch</li> <li>Develop deep learning models using high-level frameworks such as Keras and PyTorch</li> <li>Apply CNN architectures to solve image classification problems</li> <li>Implement RNN and LSTM models for natural language processing tasks</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Discuss regularization techniques to prevent overfitting in deep learning models</li> <li>Explore transfer learning and its applications in various domains</li> <li>Evaluate the ethical implications and potential biases in deep learning systems</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#project-work","title":"Project Work","text":"<ul> <li>Design, implement, and evaluate a deep learning solution for a real-world problem</li> <li>Present and defend the choices made in model architecture and training process</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#critical-analysis","title":"Critical Analysis","text":"<ul> <li>Compare the performance of different deep learning architectures on various tasks</li> <li>Critically analyze current research papers in the field of deep learning</li> <li>Identify limitations and potential future directions in deep learning research</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#grading-policy","title":"Grading Policy","text":"<ul> <li>Assignments: 70%</li> <li>Project: 30%</li> </ul> <p>Grading Scale:</p> Percents Grade &gt;90% 5 [80%, 90%) 4.5 [70%, 80%) 4 [60%, 70%) 3.5 [50%, 60%) 3","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#assignments-and-projects","title":"Assignments and Projects","text":"<ul> <li>Weekly programming assignments due every Sunday by 11:59 PM CET.</li> <li>Late submissions: Not allowed</li> <li>Final project proposal and team formation (max. 2 persons) due (1st of December, 2025),</li> <li>Final project presentation during the last week of classes (26th of January, 2026),</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#academic-integrity","title":"Academic Integrity","text":"<ul> <li>All submitted work must be original</li> <li>Collaboration on assignments is encouraged, but submitted code must be individual work</li> <li>Plagiarism or cheating will result in a failing grade for the assignment and possible disciplinary action</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#attendance-policy","title":"Attendance Policy","text":"<ul> <li>Attendance is not mandatory for all lectures and lab sessions</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#laboratories","title":"Laboratories","text":"<p>Labs assignments are organized and handle via https://classroom.github.com/.</p>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#projects","title":"Projects","text":"<ul> <li>Examples</li> <li>Project template:  https://github.com/opencompl/paper-template?tab=readme-ov-file</li> <li>Register your project</li> </ul>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#references","title":"References","text":"","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#machine-learning","title":"Machine Learning","text":"<ol> <li> <p>The Elements of Statistical Learning by Trevor Hastie, Robert Tibshirani, and Jerome Friedman.</p> </li> <li> <p>Pattern Recognition and Machine Learning by Christopher Bishop.</p> </li> <li> <p>Introduction to Machine Learning with Python by Andreas C. M\u00fcller &amp; Sarah Guido.</p> </li> <li> <p>Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow by Aur\u00e9lien G\u00e9ron.</p> </li> </ol>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#deep-learning","title":"Deep Learning","text":"<ol> <li> <p>Deep Learning by Ian Goodfellow, Yoshua Bengio, and Aaron Courville</p> </li> <li> <p>Neural Networks and Deep Learning by Michael Nielsen.</p> </li> <li> <p>Deep Learning with Python by Fran\u00e7ois Chollet.</p> </li> <li> <p>Grokking Deep Learning by Andrew W. Trask.</p> </li> </ol>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/06/course-administrative-guide/#specialized-topics","title":"Specialized Topics","text":"<ol> <li> <p>Natural Language Processing with Transformers by Lewis Tunstall, Leandro von Werra, and Thomas Wolf.</p> </li> <li> <p>Reinforcement Learning: An Introduction by Richard S. Sutton and Andrew G. Barto.</p> </li> <li> <p>Computer Vision: Algorithms and Applications by Richard Szeliski.</p> </li> <li> <p>Probabilistic Graphical Models: Principles and Techniques by Daphne Koller and Nir Friedman.</p> </li> </ol>","tags":["Machine Learning","Winter 2025/2026","Course Rules"]},{"location":"blog/2025/10/13/week-1---introduction-to-machine-learning-and-reproducible-research/","title":"Week #1 - Introduction to Machine Learning and Reproducible Research","text":"<p>In the second part of our first lecture, we will embark on an exciting journey into the world of machine learning (ML) and the critical importance of reproducible research.</p> <p>Learning objectives:</p> <ul> <li>Define and differentiate between Artificial Intelligence, Machine Learning, and Deep Learning.</li> <li>Identify and explain the main types of machine learning.</li> <li>Recognize common real-world applications of machine learning across various industries.</li> <li>Understand the basic workflow of a machine learning project, from data collection to model deployment using reproducible research principles.</li> </ul> <p>Laboratory</p> <p>Introduction lab - No deadline</p>"},{"location":"blog/2025/10/20/week-2---linear-regression-model/","title":"Week #2 - Linear Regression model","text":"<p>The review of the liner regression models in the context of machine learning and the usage of gradient descent method.</p> <p>Learning objectives:</p> <ul> <li>Understand and explain the objective function in linear regression, including its mathematical formulation and underlying rationale.</li> <li>Master both the closed-form solution and gradient descent approach for linear regression, including their mathematical derivations.</li> <li>Demonstrate proficiency in expressing linear regression solutions using matrix and vector operations.</li> <li>Explore how linear regression can model nonlinear relationships through the application of feature maps.</li> <li>Implement and compare closed-form and gradient descent solutions for linear regression using Python, emphasizing practical coding skills and algorithmic understanding.</li> </ul> <p>Laboratory</p> <p>https://classroom.github.com/a/5B0qAInA</p>"},{"location":"blog/2025/10/27/week-3---supervised-machine-learning/","title":"Week #3 - Supervised Machine Learning","text":"<p>Learning objectives:</p> <ul> <li>Formalize the supervised machine learning setup, including understanding the concepts of training data, feature spaces, label spaces, and hypothesis functions.</li> <li>Comprehend different types of classification problems (binary, multi-class) and regression, along with their corresponding label spaces and feature vector characteristics.</li> <li>Understand the process of learning a hypothesis function, including selecting an appropriate algorithm and finding the best function within the hypothesis class using loss functions.</li> <li>Grasp the concept of generalization and the importance of train/test splits to address overfitting concerns, including the role of validation data in model development.</li> <li>Learn how to properly train and evaluate a classifier, including the formulas for minimizing training loss and calculating testing loss, as well as understanding how these relate to the true generalization loss.</li> </ul> <p>Laboratory</p>"},{"location":"blog/2025/11/03/week-4---model-selection-and-hyperparameter-tuning/","title":"Week #4 - Model Selection and Hyperparameter Tuning","text":"<p>Learning objectives:</p> <ul> <li>Explain the importance of model selection and hyperparameter tuning in improving machine learning model performance, including the relationship between model complexity, bias, and variance</li> <li>Apply cross-validation techniques (k-fold, stratified, time-series) to evaluate model performance and select optimal models while avoiding overfitting</li> <li>Implement automated hyperparameter tuning methods such as Grid Search, Random Search, and Bayesian Optimization to efficiently find optimal model configurations</li> <li>Compare and evaluate different models using appropriate metrics (accuracy, precision, recall, F1-score, ROC-AUC) to make informed decisions about model selection based on the specific problem requirements and constraints</li> <li>Understand and apply regularization techniques (L1, L2, Elastic Net) to control model complexity and prevent overfitting during the model selection process</li> </ul> <p>Laboratory</p> <p>https://classroom.github.com/a/NhRt73hM</p>"},{"location":"cheat-sheets/","title":"Cheat Sheets","text":"<p>Quick reference guides for essential development tools used in research computing.</p>"},{"location":"cheat-sheets/#available-cheat-sheets","title":"Available Cheat Sheets","text":""},{"location":"cheat-sheets/#conda-cheat-sheet","title":"Conda Cheat Sheet","text":"<p>Essential commands for managing Python environments with Conda - creating environments, installing packages, and managing dependencies.</p>"},{"location":"cheat-sheets/#git-github-cheat-sheet","title":"Git &amp; GitHub Cheat Sheet","text":"<p>Quick reference for version control with Git and collaboration on GitHub - from basic commits to advanced workflows.</p>"},{"location":"cheat-sheets/#how-to-use-these-cheat-sheets","title":"How to Use These Cheat Sheets","text":"<p>These cheat sheets are designed as quick reference guides for common tasks. Each sheet includes:</p> <ul> <li>Most frequently used commands organized by category</li> <li>Practical examples with real-world scenarios</li> <li>Links to official documentation for deeper learning</li> <li>Tips and best practices for efficient workflows</li> </ul>"},{"location":"cheat-sheets/#additional-resources","title":"Additional Resources","text":"<ul> <li>Official Conda Documentation</li> <li>Official Git Documentation</li> <li>GitHub Documentation</li> <li>Pro Git Book - Free comprehensive Git guide</li> </ul> <p>Keep these cheat sheets handy during your development work for quick command lookups!</p>"},{"location":"cheat-sheets/conda/","title":"Conda Cheat Sheet","text":""},{"location":"cheat-sheets/conda/#official-conda-cheat-sheet","title":"Official Conda Cheat Sheet","text":"<p>\ud83d\udcc4 Download Conda Cheat Sheet PDF</p> <p>This official cheat sheet from the Conda documentation provides a comprehensive quick reference for:</p> <ul> <li>Creating and managing environments</li> <li>Installing and updating packages</li> <li>Searching for packages</li> <li>Managing channels</li> <li>Environment export/import</li> <li>Common troubleshooting commands</li> </ul>"},{"location":"cheat-sheets/conda/#additional-resources","title":"Additional Resources","text":"<ul> <li>Official Conda Documentation</li> <li>Conda User Guide</li> <li>Managing Environments</li> </ul>"},{"location":"cheat-sheets/git-github/","title":"Git &amp; GitHub Cheat Sheet","text":""},{"location":"cheat-sheets/git-github/#official-git-github-cheat-sheet","title":"Official Git &amp; GitHub Cheat Sheet","text":"<p>\ud83d\udcc4 Download Git &amp; GitHub Cheat Sheet PDF</p> <p>This official cheat sheet from GitHub provides a comprehensive quick reference for:</p> <ul> <li>Git basics (init, clone, status, add, commit)</li> <li>Branching and merging</li> <li>Remote repositories</li> <li>GitHub-specific workflows</li> <li>Collaboration commands</li> <li>Undoing changes</li> <li>Inspection and comparison</li> </ul>"},{"location":"cheat-sheets/git-github/#additional-resources","title":"Additional Resources","text":""},{"location":"cheat-sheets/git-github/#learning-resources","title":"Learning Resources","text":"<ul> <li>Introduction to Git - Microsoft Learn - Interactive Git fundamentals course</li> <li>GitHub Skills - Interactive Git and GitHub tutorials</li> <li>Pro Git Book - Free comprehensive Git guide</li> </ul>"},{"location":"cheat-sheets/git-github/#documentation","title":"Documentation","text":"<ul> <li>Official Git Documentation</li> <li>GitHub Documentation</li> <li>Git Reference - Complete command reference</li> </ul>"},{"location":"dev-guide/project_structure/","title":"Project Structure","text":"<p>This document describes the standard project structure for research projects hosted on GitHub Classroom. This structure promotes clean code practices, reproducibility, and maintainability across all student assignments and research work.</p>"},{"location":"dev-guide/project_structure/#overview","title":"Overview","text":"<p>Our standardized project structure follows Python best practices and includes modern tooling for code quality, testing, and documentation. Each project should be self-contained, reproducible, and ready for collaborative development.</p>"},{"location":"dev-guide/project_structure/#standard-directory-structure","title":"Standard Directory Structure","text":"<pre><code>my-research-project/\n\u251c\u2500\u2500 src/                     # Source code directory\n\u2502   \u251c\u2500\u2500 __init__.py         # Makes src a Python package\n\u2502   \u251c\u2500\u2500 problem_1.py        # Main problem solution\n\u2502   \u251c\u2500\u2500 utils.py            # Utility functions\n\u2502   \u2514\u2500\u2500 data_processing.py  # Data processing modules\n\u251c\u2500\u2500 notebooks/              # Jupyter notebooks for exploration\n\u2502   \u251c\u2500\u2500 exploration.ipynb   # Data exploration\n\u2502   \u251c\u2500\u2500 analysis.ipynb      # Analysis and visualization\n\u2502   \u2514\u2500\u2500 results.ipynb       # Final results presentation\n\u251c\u2500\u2500 tests/                  # Test files using pytest\n\u2502   \u251c\u2500\u2500 __init__.py         # Makes tests a Python package\n\u2502   \u251c\u2500\u2500 test_problem_1.py   # Tests for problem_1.py\n\u2502   \u251c\u2500\u2500 test_utils.py       # Tests for utility functions\n\u2502   \u2514\u2500\u2500 conftest.py         # Pytest configuration and fixtures\n\u251c\u2500\u2500 data/                   # Data files (if small and non-sensitive)\n\u2502   \u251c\u2500\u2500 raw/                # Raw, unprocessed data\n\u2502   \u251c\u2500\u2500 processed/          # Cleaned and processed data\n\u2502   \u2514\u2500\u2500 external/           # External datasets\n\u251c\u2500\u2500 docs/                   # Documentation\n\u2502   \u251c\u2500\u2500 README.md           # Project documentation\n\u2502   \u2514\u2500\u2500 api.md              # API documentation\n\u251c\u2500\u2500 .github/                # GitHub-specific files\n\u2502   \u2514\u2500\u2500 workflows/          # GitHub Actions workflows\n\u2502       \u2514\u2500\u2500 tests.yml       # Automated testing workflow\n\u251c\u2500\u2500 Justfile                # Task runner for common commands\n\u251c\u2500\u2500 pyproject.toml          # Python project configuration\n\u251c\u2500\u2500 env.yaml                # Conda environment specification\n\u251c\u2500\u2500 .gitignore              # Git ignore patterns\n\u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit hooks configuration\n\u2514\u2500\u2500 README.md               # Main project documentation\n</code></pre>"},{"location":"dev-guide/project_structure/#core-files-and-directories","title":"Core Files and Directories","text":""},{"location":"dev-guide/project_structure/#source-code-src","title":"Source Code (<code>src/</code>)","text":"<p>The <code>src/</code> directory contains all your Python source code. This structure follows the \"src layout\" pattern, which provides better isolation and testing practices.</p> <p>Key files: - <code>src/problem_1.py</code> - Main implementation for your assignment - <code>src/utils.py</code> - Reusable utility functions - <code>src/__init__.py</code> - Package initialization</p> <p>Benefits of src layout: - Prevents accidental imports of development code - Clearer separation between source and test code - Better support for packaging and distribution</p>"},{"location":"dev-guide/project_structure/#notebooks-notebooks","title":"Notebooks (<code>notebooks/</code>)","text":"<p>The <code>notebooks/</code> directory contains Jupyter notebooks for data exploration, analysis, and result presentation. Notebooks are excellent for:</p> <ul> <li>Exploratory data analysis</li> <li>Prototyping algorithms</li> <li>Creating visualizations</li> <li>Documenting analysis workflows</li> </ul> <p>Organization tips: - Use descriptive names with numbers for ordering: <code>01_data_exploration.ipynb</code> - Keep notebooks focused on specific tasks - Export important functions to <code>src/</code> modules - Clear outputs before committing to version control</p>"},{"location":"dev-guide/project_structure/#tests-tests","title":"Tests (<code>tests/</code>)","text":"<p>The <code>tests/</code> directory contains all test files using pytest. Testing is crucial for:</p> <ul> <li>Verifying code correctness</li> <li>Preventing regressions</li> <li>Documenting expected behavior</li> <li>Building confidence in your implementation</li> </ul> <p>Test file naming: - <code>test_*.py</code> or <code>*_test.py</code> patterns - Mirror the structure of your <code>src/</code> directory - One test file per source module</p> <p>See the Testing with Pytest section for detailed information.</p>"},{"location":"dev-guide/project_structure/#configuration-files","title":"Configuration Files","text":""},{"location":"dev-guide/project_structure/#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>Central configuration file for Python projects. Contains:</p> <ul> <li>Project metadata and dependencies</li> <li>Tool configurations (Ruff, pytest, mypy)</li> <li>Build system specifications</li> </ul> <p>For detailed configuration options, see our Linting &amp; Formatting and Workflow Integration guides.</p>"},{"location":"dev-guide/project_structure/#envyaml","title":"<code>env.yaml</code>","text":"<p>Conda environment specification for reproducible environments:</p> <pre><code>name: my-research-project\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - python=3.10\n  - numpy\n  - pandas\n  - matplotlib\n  - scipy\n  - jupyter\n  - pytest\n  - pip\n  - pip:\n    - ruff\n    - mypy\n</code></pre> <p>For more details, see our Python Environment Management guide.</p>"},{"location":"dev-guide/project_structure/#gitignore","title":"<code>.gitignore</code>","text":"<p>Specifies files and directories that Git should ignore:</p> <ul> <li>Python bytecode (<code>__pycache__/</code>, <code>*.pyc</code>)</li> <li>Virtual environments (<code>.venv/</code>, <code>env/</code>)</li> <li>IDE files (<code>.vscode/</code>, <code>.idea/</code>)</li> <li>Data files (if large or sensitive)</li> <li>Build artifacts (<code>build/</code>, <code>dist/</code>)</li> </ul>"},{"location":"dev-guide/project_structure/#pre-commit-configyaml","title":"<code>.pre-commit-config.yaml</code>","text":"<p>Configuration for pre-commit hooks that run automatically before each commit. See Workflow Integration for setup details.</p>"},{"location":"dev-guide/project_structure/#justfile-task-automation","title":"Justfile - Task Automation","text":"<p>The <code>Justfile</code> provides a simple way to run common development tasks. Just is a modern alternative to Make with a cleaner syntax.</p>"},{"location":"dev-guide/project_structure/#current-justfile-commands","title":"Current Justfile Commands","text":"<p>Our current <code>Justfile</code> includes:</p> <pre><code># Run pre-commit hooks on all files\npc:\n    pre-commit run --all-files\n\n# Serve the MkDocs documentation\nserve:\n    poetry run mkdocs serve\n</code></pre>"},{"location":"dev-guide/project_structure/#recommended-justfile-for-student-projects","title":"Recommended Justfile for Student Projects","text":"<p>For student research projects, we recommend expanding the <code>Justfile</code> with these common tasks:</p> <pre><code># Show available commands\ndefault:\n    @just --list\n\n# Install dependencies and setup development environment\nsetup:\n    conda env create -f env.yaml\n    conda activate my-research-project\n    pre-commit install\n\n# Run all tests\ntest:\n    pytest tests/ -v\n\n# Run tests with coverage report\ntest-cov:\n    pytest tests/ --cov=src --cov-report=html --cov-report=term\n\n# Run linting and formatting\nlint:\n    ruff check src/ tests/\n    ruff format src/ tests/\n\n# Run type checking\ntypecheck:\n    mypy src/\n\n# Run all quality checks\ncheck: lint typecheck test\n\n# Clean up generated files\nclean:\n    rm -rf .pytest_cache/\n    rm -rf htmlcov/\n    rm -rf .coverage\n    find . -type d -name __pycache__ -delete\n    find . -type f -name \"*.pyc\" -delete\n\n# Start Jupyter notebook server\nnotebook:\n    jupyter notebook notebooks/\n\n# Run the main problem solution\nrun:\n    python -m src.problem_1\n</code></pre>"},{"location":"dev-guide/project_structure/#installing-just","title":"Installing Just","text":"<p>Install Just using one of these methods:</p> <pre><code># Using cargo (Rust package manager)\ncargo install just\n\n# Using conda\nconda install -c conda-forge just\n\n# Using homebrew (macOS)\nbrew install just\n\n# Using pip (unofficial)\npip install just-install\n</code></pre>"},{"location":"dev-guide/project_structure/#testing-with-pytest","title":"Testing with Pytest","text":"<p>Pytest is the recommended testing framework for Python projects. It provides powerful features with minimal boilerplate.</p>"},{"location":"dev-guide/project_structure/#basic-test-structure","title":"Basic Test Structure","text":"<pre><code># tests/test_problem_1.py\nimport pytest\nfrom src.problem_1 import solve_problem, validate_input\n\ndef test_solve_problem_basic():\n    \"\"\"Test basic functionality of solve_problem.\"\"\"\n    result = solve_problem([1, 2, 3])\n    assert result == 6\n\ndef test_solve_problem_empty_input():\n    \"\"\"Test solve_problem with empty input.\"\"\"\n    result = solve_problem([])\n    assert result == 0\n\ndef test_validate_input_valid():\n    \"\"\"Test validate_input with valid data.\"\"\"\n    assert validate_input([1, 2, 3]) is True\n\ndef test_validate_input_invalid():\n    \"\"\"Test validate_input with invalid data.\"\"\"\n    with pytest.raises(ValueError):\n        validate_input(\"not a list\")\n\n@pytest.fixture\ndef sample_data():\n    \"\"\"Provide sample data for tests.\"\"\"\n    return [1, 2, 3, 4, 5]\n\ndef test_with_fixture(sample_data):\n    \"\"\"Test using a fixture.\"\"\"\n    result = solve_problem(sample_data)\n    assert result == 15\n</code></pre>"},{"location":"dev-guide/project_structure/#pytest-configuration","title":"Pytest Configuration","text":"<p>Configure pytest in <code>pyproject.toml</code>:</p> <pre><code>[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_functions = [\"test_*\"]\naddopts = [\n    \"--strict-markers\",\n    \"--strict-config\",\n    \"--verbose\",\n    \"--cov=src\",\n    \"--cov-report=term-missing\",\n    \"--cov-report=html\",\n]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"integration: marks tests as integration tests\",\n]\n</code></pre>"},{"location":"dev-guide/project_structure/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=src\n\n# Run specific test file\npytest tests/test_problem_1.py\n\n# Run tests matching a pattern\npytest -k \"test_solve\"\n\n# Run tests with verbose output\npytest -v\n\n# Run tests and stop on first failure\npytest -x\n</code></pre>"},{"location":"dev-guide/project_structure/#test-organization-best-practices","title":"Test Organization Best Practices","text":"<ol> <li>Mirror source structure: Test files should mirror your <code>src/</code> directory structure</li> <li>Descriptive names: Use clear, descriptive test function names</li> <li>One concept per test: Each test should verify one specific behavior</li> <li>Use fixtures: Share common test data and setup using pytest fixtures</li> <li>Test edge cases: Include tests for boundary conditions and error cases</li> </ol>"},{"location":"dev-guide/project_structure/#development-workflow","title":"Development Workflow","text":""},{"location":"dev-guide/project_structure/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone &lt;repository-url&gt;\ncd my-research-project\n</code></pre></p> </li> <li> <p>Set up environment: <pre><code># Using conda (recommended)\nconda env create -f env.yaml\nconda activate my-research-project\n\n# Or using pip + venv\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Install development tools: <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Verify setup: <pre><code>just test  # or pytest\njust lint  # or ruff check .\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/project_structure/#daily-development","title":"Daily Development","text":"<ol> <li> <p>Start working: <pre><code>conda activate my-research-project  # or source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Run tests frequently: <pre><code>just test  # or pytest\n</code></pre></p> </li> <li> <p>Check code quality: <pre><code>just check  # or just lint &amp;&amp; just typecheck\n</code></pre></p> </li> <li> <p>Before committing: <pre><code>just check  # Ensure all checks pass\ngit add .\ngit commit -m \"Descriptive commit message\"\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/project_structure/#code-quality-tools","title":"Code Quality Tools","text":"<p>Our projects use modern Python tooling for maintaining code quality:</p> <ul> <li>Ruff: Fast linting and formatting (replaces Black, isort, Flake8)</li> <li>MyPy: Static type checking</li> <li>Pytest: Testing framework</li> <li>Pre-commit: Git hooks for automated checks</li> </ul> <p>For detailed information about these tools, see: - Linting &amp; Formatting - Type Hints - Workflow Integration</p>"},{"location":"dev-guide/project_structure/#github-classroom-integration","title":"GitHub Classroom Integration","text":""},{"location":"dev-guide/project_structure/#repository-setup","title":"Repository Setup","text":"<p>When you accept a GitHub Classroom assignment:</p> <ol> <li>Repository is automatically created with the standard structure</li> <li>GitHub Actions workflows are pre-configured for automated testing</li> <li>Branch protection rules may be enabled to require passing tests</li> </ol>"},{"location":"dev-guide/project_structure/#automated-testing","title":"Automated Testing","text":"<p>GitHub Actions automatically run tests on every push and pull request:</p> <pre><code># .github/workflows/tests.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install pytest pytest-cov ruff mypy\n      - name: Run linting\n        run: ruff check .\n      - name: Run type checking\n        run: mypy src/\n      - name: Run tests\n        run: pytest --cov=src\n</code></pre>"},{"location":"dev-guide/project_structure/#submission-guidelines","title":"Submission Guidelines","text":"<ol> <li>Complete all required functions in <code>src/problem_1.py</code></li> <li>Write comprehensive tests in <code>tests/</code></li> <li>Ensure all tests pass locally and in GitHub Actions</li> <li>Follow code quality standards (linting, formatting, type hints)</li> <li>Update documentation as needed</li> <li>Commit frequently with descriptive messages</li> </ol>"},{"location":"dev-guide/project_structure/#best-practices","title":"Best Practices","text":""},{"location":"dev-guide/project_structure/#code-organization","title":"Code Organization","text":"<ol> <li>Keep functions small and focused - Each function should do one thing well</li> <li>Use meaningful names - Variables, functions, and classes should have descriptive names</li> <li>Add type hints - Help with code clarity and catch errors early</li> <li>Write docstrings - Document your functions and classes</li> <li>Separate concerns - Keep data processing, analysis, and visualization separate</li> </ol>"},{"location":"dev-guide/project_structure/#version-control","title":"Version Control","text":"<ol> <li>Commit frequently - Small, focused commits are easier to review and debug</li> <li>Write good commit messages - Explain what and why, not just what</li> <li>Use branches - Create feature branches for significant changes</li> <li>Don't commit generated files - Keep your repository clean</li> </ol>"},{"location":"dev-guide/project_structure/#testing","title":"Testing","text":"<ol> <li>Write tests first - Test-driven development helps design better code</li> <li>Test edge cases - Don't just test the happy path</li> <li>Keep tests simple - Tests should be easy to understand and maintain</li> <li>Use descriptive test names - Test names should explain what is being tested</li> </ol>"},{"location":"dev-guide/project_structure/#documentation","title":"Documentation","text":"<ol> <li>Keep README up to date - Explain how to set up and run your project</li> <li>Document your analysis - Use notebooks to explain your thought process</li> <li>Comment complex code - Help future you understand what you were thinking</li> <li>Include examples - Show how to use your functions</li> </ol>"},{"location":"dev-guide/project_structure/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dev-guide/project_structure/#common-issues","title":"Common Issues","text":"<p>Environment activation fails: <pre><code># Make sure conda is initialized\nconda init\n# Restart your terminal\n# Try activating again\nconda activate my-research-project\n</code></pre></p> <p>Tests fail with import errors: <pre><code># Make sure you're in the project root directory\n# Install the project in development mode\npip install -e .\n</code></pre></p> <p>Pre-commit hooks fail: <pre><code># Run hooks manually to see detailed errors\npre-commit run --all-files\n# Fix the issues and try again\n</code></pre></p> <p>Ruff formatting conflicts: <pre><code># Let Ruff fix what it can automatically\nruff check --fix .\nruff format .\n</code></pre></p>"},{"location":"dev-guide/project_structure/#getting-help","title":"Getting Help","text":"<ol> <li>Check the error message - Most errors have helpful information</li> <li>Read the documentation - Links to tool documentation are provided throughout</li> <li>Ask for help - Use GitHub Issues or class discussion forums</li> <li>Search online - Stack Overflow and GitHub Issues are great resources</li> </ol>"},{"location":"dev-guide/project_structure/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting Started Guide - Initial setup and installation</li> <li>Python Environment Management - Detailed environment setup</li> <li>Clean Code Practices - Code quality guidelines</li> <li>Linting &amp; Formatting - Tool configuration and usage</li> <li>Type Hints - Static typing in Python</li> <li>Workflow Integration - Automation and CI/CD</li> <li>Git &amp; GitHub Cheat Sheet - Version control reference</li> <li>Conda Cheat Sheet - Environment management reference</li> </ul> <p>This structure ensures that your research projects are reproducible, maintainable, and follow modern Python development best practices. By following these guidelines, you'll develop good habits that will serve you well in both academic and professional software development.</p>"},{"location":"dev-guide/clean-code/","title":"Clean Code","text":"<p>Writing clean, readable, and maintainable code is crucial for reproducible research.</p> <p>This section covers Python coding standards, linting, and formatting tools to help you write high-quality, consistent code.</p>"},{"location":"dev-guide/clean-code/#overview","title":"Overview","text":"<p>Clean code practices ensure that your research code is:</p> <ul> <li>Readable: Easy to understand by you and your collaborators</li> <li>Maintainable: Simple to modify and extend</li> <li>Reproducible: Consistent results across different environments</li> <li>Professional: Follows industry standards and best practices</li> </ul>"},{"location":"dev-guide/clean-code/#what-youll-learn","title":"What You'll Learn","text":"<p>This guide covers:</p> <ol> <li>Python Standards: Understanding PEPs and core Python conventions</li> <li>Style Guidelines: PEP 8 and formatting best practices</li> <li>Linting and Formatting: Modern tools like Ruff for code quality</li> <li>Type Hints: Using Python's type system for better code</li> <li>Documentation: Writing effective comments and docstrings</li> <li>Best Practices: Additional principles for clean code</li> <li>Workflow Integration: Automating code quality in your development process</li> </ol>"},{"location":"dev-guide/clean-code/#quick-start","title":"Quick Start","text":"<p>For immediate improvement to your code quality:</p> <ol> <li>Install Ruff:</li> </ol> pipconda/mambauvpoetry <pre><code>pip install ruff\n</code></pre> <pre><code>conda install -c conda-forge ruff\n# or\nmamba install -c conda-forge ruff\n</code></pre> <pre><code>uv add ruff\n</code></pre> <pre><code>poetry add ruff --group dev\n</code></pre> <ol> <li>Run linting: <code>ruff check .</code></li> <li>Auto-format: <code>ruff format .</code></li> <li>Add type hints to your functions</li> <li>Write docstrings for your modules and functions</li> </ol> <p>By following these guidelines and using modern tools, you'll produce cleaner, more maintainable, and more reproducible code.</p>"},{"location":"dev-guide/clean-code/best-practices/","title":"Best Practices","text":"<p>Beyond style guides and tools, these principles will help you write cleaner, more maintainable code.</p>"},{"location":"dev-guide/clean-code/best-practices/#core-principles","title":"Core Principles","text":""},{"location":"dev-guide/clean-code/best-practices/#1-dry-dont-repeat-yourself","title":"1. DRY (Don't Repeat Yourself)","text":"<p>Avoid duplicating code. Extract repeated logic into functions or classes.</p> <pre><code># Bad - repetitive code\ndef calculate_circle_area(radius):\n    return 3.14159 * radius * radius\n\ndef calculate_circle_circumference(radius):\n    return 2 * 3.14159 * radius\n\ndef calculate_sphere_volume(radius):\n    return (4/3) * 3.14159 * radius * radius * radius\n\n# Good - extract constants and common patterns\nimport math\n\nPI = math.pi\n\ndef calculate_circle_area(radius: float) -&gt; float:\n    \"\"\"Calculate the area of a circle.\"\"\"\n    return PI * radius ** 2\n\ndef calculate_circle_circumference(radius: float) -&gt; float:\n    \"\"\"Calculate the circumference of a circle.\"\"\"\n    return 2 * PI * radius\n\ndef calculate_sphere_volume(radius: float) -&gt; float:\n    \"\"\"Calculate the volume of a sphere.\"\"\"\n    return (4/3) * PI * radius ** 3\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#2-kiss-keep-it-simple-stupid","title":"2. KISS (Keep It Simple, Stupid)","text":"<p>Write simple, straightforward code. Avoid over-engineering.</p> <pre><code># Bad - overly complex\ndef is_even_complex(number):\n    return True if number % 2 == 0 else False\n\ndef get_user_status_complex(user):\n    if user.is_active == True:\n        if user.subscription_expired == False:\n            return \"active\"\n        else:\n            return \"expired\"\n    else:\n        return \"inactive\"\n\n# Good - simple and clear\ndef is_even(number: int) -&gt; bool:\n    \"\"\"Check if a number is even.\"\"\"\n    return number % 2 == 0\n\ndef get_user_status(user) -&gt; str:\n    \"\"\"Get user status based on activity and subscription.\"\"\"\n    if not user.is_active:\n        return \"inactive\"\n    if user.subscription_expired:\n        return \"expired\"\n    return \"active\"\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#3-yagni-you-arent-gonna-need-it","title":"3. YAGNI (You Aren't Gonna Need It)","text":"<p>Don't add functionality until it's necessary.</p> <pre><code># Bad - premature optimization and unused features\nclass DataProcessor:\n    def __init__(self):\n        self.cache = {}  # Might need caching later\n        self.parallel_processing = False  # Future feature\n        self.compression_enabled = False  # Maybe useful\n\n    def process(self, data):\n        # Only actually need this simple processing\n        return [item.strip().lower() for item in data]\n\n# Good - implement only what's needed now\nclass DataProcessor:\n    def process(self, data: list[str]) -&gt; list[str]:\n        \"\"\"Process data by stripping whitespace and converting to lowercase.\"\"\"\n        return [item.strip().lower() for item in data]\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#code-organization","title":"Code Organization","text":""},{"location":"dev-guide/clean-code/best-practices/#4-single-responsibility-principle","title":"4. Single Responsibility Principle","text":"<p>Each function or class should have one reason to change.</p> <pre><code># Bad - multiple responsibilities\nclass UserManager:\n    def create_user(self, user_data):\n        # Validate data\n        if not user_data.get('email'):\n            raise ValueError(\"Email required\")\n\n        # Save to database\n        db.save_user(user_data)\n\n        # Send welcome email\n        email_service.send_welcome(user_data['email'])\n\n        # Log the action\n        logger.info(f\"User created: {user_data['email']}\")\n\n# Good - separated responsibilities\nclass UserValidator:\n    def validate(self, user_data: dict) -&gt; None:\n        \"\"\"Validate user data.\"\"\"\n        if not user_data.get('email'):\n            raise ValueError(\"Email required\")\n\nclass UserRepository:\n    def save(self, user_data: dict) -&gt; None:\n        \"\"\"Save user to database.\"\"\"\n        db.save_user(user_data)\n\nclass UserNotificationService:\n    def send_welcome_email(self, email: str) -&gt; None:\n        \"\"\"Send welcome email to new user.\"\"\"\n        email_service.send_welcome(email)\n\nclass UserManager:\n    def __init__(self):\n        self.validator = UserValidator()\n        self.repository = UserRepository()\n        self.notification_service = UserNotificationService()\n\n    def create_user(self, user_data: dict) -&gt; None:\n        \"\"\"Create a new user.\"\"\"\n        self.validator.validate(user_data)\n        self.repository.save(user_data)\n        self.notification_service.send_welcome_email(user_data['email'])\n        logger.info(f\"User created: {user_data['email']}\")\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#5-write-self-documenting-code","title":"5. Write Self-Documenting Code","text":"<p>Choose descriptive names that explain their purpose.</p> <pre><code># Bad - unclear names\ndef calc(d, r):\n    return d * r * 0.1\n\ndef proc_usr(u):\n    if u[0] &gt; 18:\n        return True\n    return False\n\n# Good - self-documenting\ndef calculate_discount(price: float, discount_rate: float) -&gt; float:\n    \"\"\"Calculate discount amount.\"\"\"\n    return price * discount_rate * 0.1\n\ndef is_adult(user_age: int) -&gt; bool:\n    \"\"\"Check if user is an adult (18 or older).\"\"\"\n    return user_age &gt;= 18\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"dev-guide/clean-code/best-practices/#6-fail-fast-and-explicitly","title":"6. Fail Fast and Explicitly","text":"<p>Catch errors early and provide clear error messages.</p> <pre><code># Bad - silent failures and unclear errors\ndef divide_numbers(a, b):\n    try:\n        return a / b\n    except:\n        return None\n\ndef process_file(filename):\n    try:\n        with open(filename) as f:\n            return f.read()\n    except:\n        return \"\"\n\n# Good - explicit error handling\ndef divide_numbers(a: float, b: float) -&gt; float:\n    \"\"\"Divide two numbers.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\ndef process_file(filename: str) -&gt; str:\n    \"\"\"Read and return file contents.\"\"\"\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            return f.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {filename}\")\n    except PermissionError:\n        raise PermissionError(f\"Permission denied: {filename}\")\n    except UnicodeDecodeError:\n        raise UnicodeDecodeError(f\"Cannot decode file: {filename}\")\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#7-use-context-managers","title":"7. Use Context Managers","text":"<p>Ensure proper resource cleanup.</p> <pre><code># Bad - manual resource management\ndef read_config():\n    file = open('config.txt')\n    data = file.read()\n    file.close()  # Might not execute if error occurs\n    return data\n\n# Good - automatic resource management\ndef read_config() -&gt; str:\n    \"\"\"Read configuration from file.\"\"\"\n    with open('config.txt', 'r', encoding='utf-8') as file:\n        return file.read()\n\n# Custom context manager for database connections\nfrom contextlib import contextmanager\n\n@contextmanager\ndef database_connection():\n    \"\"\"Context manager for database connections.\"\"\"\n    conn = create_connection()\n    try:\n        yield conn\n    finally:\n        conn.close()\n\n# Usage\ndef get_user_data(user_id: int) -&gt; dict:\n    \"\"\"Get user data from database.\"\"\"\n    with database_connection() as conn:\n        return conn.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#function-design","title":"Function Design","text":""},{"location":"dev-guide/clean-code/best-practices/#8-keep-functions-small","title":"8. Keep Functions Small","text":"<p>Functions should do one thing well.</p> <pre><code># Bad - large function doing multiple things\ndef process_user_registration(user_data):\n    # Validate email\n    if '@' not in user_data['email']:\n        raise ValueError(\"Invalid email\")\n\n    # Check if user exists\n    existing = db.query(\"SELECT * FROM users WHERE email = ?\", user_data['email'])\n    if existing:\n        raise ValueError(\"User already exists\")\n\n    # Hash password\n    import hashlib\n    hashed_password = hashlib.sha256(user_data['password'].encode()).hexdigest()\n\n    # Save user\n    db.execute(\"INSERT INTO users (email, password) VALUES (?, ?)\",\n               user_data['email'], hashed_password)\n\n    # Send email\n    send_email(user_data['email'], \"Welcome!\")\n\n    # Log action\n    logger.info(f\"User registered: {user_data['email']}\")\n\n# Good - small, focused functions\ndef validate_email(email: str) -&gt; None:\n    \"\"\"Validate email format.\"\"\"\n    if '@' not in email:\n        raise ValueError(\"Invalid email format\")\n\ndef check_user_exists(email: str) -&gt; bool:\n    \"\"\"Check if user already exists.\"\"\"\n    existing = db.query(\"SELECT * FROM users WHERE email = ?\", email)\n    return bool(existing)\n\ndef hash_password(password: str) -&gt; str:\n    \"\"\"Hash password using SHA256.\"\"\"\n    import hashlib\n    return hashlib.sha256(password.encode()).hexdigest()\n\ndef save_user(email: str, hashed_password: str) -&gt; None:\n    \"\"\"Save user to database.\"\"\"\n    db.execute(\"INSERT INTO users (email, password) VALUES (?, ?)\",\n               email, hashed_password)\n\ndef process_user_registration(user_data: dict) -&gt; None:\n    \"\"\"Process user registration.\"\"\"\n    validate_email(user_data['email'])\n\n    if check_user_exists(user_data['email']):\n        raise ValueError(\"User already exists\")\n\n    hashed_password = hash_password(user_data['password'])\n    save_user(user_data['email'], hashed_password)\n\n    send_email(user_data['email'], \"Welcome!\")\n    logger.info(f\"User registered: {user_data['email']}\")\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#9-use-pure-functions-when-possible","title":"9. Use Pure Functions When Possible","text":"<p>Functions that don't have side effects are easier to test and reason about.</p> <pre><code># Bad - function with side effects\ntotal_processed = 0\n\ndef process_item(item):\n    global total_processed\n    result = item.upper()\n    total_processed += 1  # Side effect\n    print(f\"Processed: {result}\")  # Side effect\n    return result\n\n# Good - pure function\ndef process_item(item: str) -&gt; str:\n    \"\"\"Process item by converting to uppercase.\"\"\"\n    return item.upper()\n\ndef process_items_with_logging(items: list[str]) -&gt; list[str]:\n    \"\"\"Process items and log progress.\"\"\"\n    results = []\n    for i, item in enumerate(items):\n        result = process_item(item)\n        results.append(result)\n        print(f\"Processed {i+1}/{len(items)}: {result}\")\n    return results\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#data-structures","title":"Data Structures","text":""},{"location":"dev-guide/clean-code/best-practices/#10-use-appropriate-data-structures","title":"10. Use Appropriate Data Structures","text":"<p>Choose the right data structure for the job.</p> <pre><code># Bad - using list for lookups\ndef find_user_by_id(users_list, user_id):\n    for user in users_list:  # O(n) lookup\n        if user['id'] == user_id:\n            return user\n    return None\n\n# Good - using dictionary for O(1) lookups\ndef create_user_index(users: list[dict]) -&gt; dict[int, dict]:\n    \"\"\"Create an index of users by ID for fast lookups.\"\"\"\n    return {user['id']: user for user in users}\n\ndef find_user_by_id(user_index: dict[int, dict], user_id: int) -&gt; dict | None:\n    \"\"\"Find user by ID using index.\"\"\"\n    return user_index.get(user_id)\n\n# Use sets for membership testing\ndef filter_allowed_users(users: list[str], allowed_users: set[str]) -&gt; list[str]:\n    \"\"\"Filter users to only include allowed ones.\"\"\"\n    return [user for user in users if user in allowed_users]  # O(1) lookup\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#11-prefer-immutable-data","title":"11. Prefer Immutable Data","text":"<p>Immutable data is safer and easier to reason about.</p> <pre><code># Bad - mutable default arguments\ndef add_item(item, items=[]):  # Dangerous!\n    items.append(item)\n    return items\n\n# Good - immutable approach\ndef add_item(item: str, items: list[str] | None = None) -&gt; list[str]:\n    \"\"\"Add item to list, returning new list.\"\"\"\n    if items is None:\n        items = []\n    return items + [item]  # Return new list\n\n# Use dataclasses with frozen=True for immutable objects\nfrom dataclasses import dataclass\n\n@dataclass(frozen=True)\nclass Point:\n    x: float\n    y: float\n\n    def move(self, dx: float, dy: float) -&gt; 'Point':\n        \"\"\"Return new Point moved by dx, dy.\"\"\"\n        return Point(self.x + dx, self.y + dy)\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#testing-considerations","title":"Testing Considerations","text":""},{"location":"dev-guide/clean-code/best-practices/#12-write-testable-code","title":"12. Write Testable Code","text":"<p>Design code to be easy to test.</p> <pre><code># Bad - hard to test due to dependencies\ndef process_user_data():\n    data = requests.get(\"https://api.example.com/users\").json()\n    processed = [user['name'].upper() for user in data]\n    with open('output.txt', 'w') as f:\n        f.write('\\n'.join(processed))\n\n# Good - testable with dependency injection\ndef fetch_user_data(api_client) -&gt; list[dict]:\n    \"\"\"Fetch user data from API.\"\"\"\n    return api_client.get_users()\n\ndef process_names(users: list[dict]) -&gt; list[str]:\n    \"\"\"Process user names.\"\"\"\n    return [user['name'].upper() for user in users]\n\ndef save_results(data: list[str], file_writer) -&gt; None:\n    \"\"\"Save results using provided writer.\"\"\"\n    file_writer.write('\\n'.join(data))\n\ndef process_user_data(api_client, file_writer) -&gt; None:\n    \"\"\"Main processing function.\"\"\"\n    users = fetch_user_data(api_client)\n    processed_names = process_names(users)\n    save_results(processed_names, file_writer)\n</code></pre>"},{"location":"dev-guide/clean-code/best-practices/#performance-considerations","title":"Performance Considerations","text":""},{"location":"dev-guide/clean-code/best-practices/#13-optimize-when-necessary","title":"13. Optimize When Necessary","text":"<p>Don't optimize prematurely, but be aware of performance implications.</p> <pre><code># Bad - premature optimization\ndef find_max_optimized(numbers):\n    # Unnecessary complexity for most use cases\n    if not numbers:\n        return None\n    max_val = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] &gt; max_val:\n            max_val = numbers[i]\n    return max_val\n\n# Good - use built-in functions first\ndef find_max(numbers: list[float]) -&gt; float | None:\n    \"\"\"Find maximum value in list.\"\"\"\n    return max(numbers) if numbers else None\n\n# Optimize only when profiling shows it's needed\ndef find_max_large_dataset(numbers: list[float]) -&gt; float | None:\n    \"\"\"Optimized max finding for very large datasets.\"\"\"\n    if not numbers:\n        return None\n\n    # Use numpy for large datasets if available\n    try:\n        import numpy as np\n        return float(np.max(numbers))\n    except ImportError:\n        return max(numbers)\n</code></pre> <p>These best practices will help you write code that is not only functional but also maintainable, readable, and robust. Remember: good code is written for humans to read, not just for computers to execute.</p>"},{"location":"dev-guide/clean-code/documentation/","title":"Documentation","text":"<p>Good documentation is essential for maintainable code. This includes comments, docstrings, and following established documentation standards.</p>"},{"location":"dev-guide/clean-code/documentation/#google-python-style-guide-for-documentation","title":"Google Python Style Guide for Documentation","text":"<p>Following Google's Python Style Guide for Comments and Docstrings ensures consistent and comprehensive documentation.</p>"},{"location":"dev-guide/clean-code/documentation/#docstring-format","title":"Docstring Format","text":"<p>Use the Google docstring format for consistency:</p> <pre><code>def fetch_smalltable_rows(table_handle: bigtable.Table,\n                         keys: Sequence[bytes],\n                         require_all_keys: bool = False,\n                         ) -&gt; Mapping[bytes, tuple[str, ...]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle. String keys will be UTF-8 encoded.\n\n    Args:\n        table_handle: An open bigtable.Table instance.\n        keys: A sequence of strings representing the key of each table\n            row to fetch. String keys will be UTF-8 encoded.\n        require_all_keys: If True only rows with values set for all keys will be\n            returned.\n\n    Returns:\n        A dict mapping keys to the corresponding table row data\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {b'Serak': ('Rigel VII', 'Preparer'),\n         b'Zim': ('Irk', 'Invader'),\n         b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n        Returned keys are always bytes. If a key from the keys argument is\n        missing from the dictionary, then that row was not found in the\n        table (and require_all_keys must have been False).\n\n    Raises:\n        IOError: An error occurred accessing the smalltable.\n    \"\"\"\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#docstring-conventions-pep-257","title":"Docstring Conventions (PEP 257)","text":"<p>PEP 257 defines docstring conventions:</p>"},{"location":"dev-guide/clean-code/documentation/#basic-rules","title":"Basic Rules","text":"<ol> <li>Use triple double quotes for docstrings</li> <li>Start with a one-line summary</li> <li>Use imperative mood (\"Return\" not \"Returns\")</li> <li>End the summary line with a period</li> <li>Leave a blank line after the summary if there's more content</li> </ol>"},{"location":"dev-guide/clean-code/documentation/#module-docstrings","title":"Module Docstrings","text":"<pre><code>\"\"\"A one-line summary of the module or program.\n\nThis module provides utilities for data processing and analysis.\nIt includes functions for cleaning, transforming, and validating\nresearch data from various sources.\n\nExample:\n    Basic usage of this module:\n\n        from data_utils import clean_data, validate_input\n\n        cleaned = clean_data(raw_data)\n        if validate_input(cleaned):\n            process_data(cleaned)\n\nAttributes:\n    DEFAULT_ENCODING (str): The default character encoding.\n    MAX_RETRIES (int): Maximum number of retry attempts.\n\"\"\"\n\nDEFAULT_ENCODING = \"utf-8\"\nMAX_RETRIES = 3\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#class-docstrings","title":"Class Docstrings","text":"<pre><code>class DataProcessor:\n    \"\"\"A class for processing research data.\n\n    This class provides methods for cleaning, transforming, and validating\n    data from various research sources. It maintains state about the\n    processing pipeline and can handle multiple data formats.\n\n    Attributes:\n        config: A dictionary containing processing configuration.\n        processed_count: The number of records processed.\n\n    Example:\n        processor = DataProcessor(config={'format': 'csv'})\n        result = processor.process_file('data.csv')\n    \"\"\"\n\n    def __init__(self, config: dict[str, str]) -&gt; None:\n        \"\"\"Initialize the DataProcessor.\n\n        Args:\n            config: Configuration dictionary with processing options.\n        \"\"\"\n        self.config = config\n        self.processed_count = 0\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#function-docstrings","title":"Function Docstrings","text":"<pre><code>def calculate_statistics(data: list[float],\n                        include_median: bool = True) -&gt; dict[str, float]:\n    \"\"\"Calculate basic statistics for a dataset.\n\n    Computes mean, standard deviation, and optionally median\n    for the provided numerical data.\n\n    Args:\n        data: A list of numerical values to analyze.\n        include_median: Whether to include median in the results.\n\n    Returns:\n        A dictionary containing statistical measures:\n        - 'mean': The arithmetic mean\n        - 'std': The standard deviation\n        - 'median': The median (if include_median is True)\n\n    Raises:\n        ValueError: If the data list is empty.\n        TypeError: If data contains non-numerical values.\n\n    Example:\n        &gt;&gt;&gt; data = [1, 2, 3, 4, 5]\n        &gt;&gt;&gt; stats = calculate_statistics(data)\n        &gt;&gt;&gt; print(stats['mean'])\n        3.0\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty\")\n\n    # Implementation here\n    pass\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#comment-guidelines","title":"Comment Guidelines","text":""},{"location":"dev-guide/clean-code/documentation/#when-to-comment","title":"When to Comment","text":"<p>Good reasons to comment: - Explain complex algorithms or business logic - Clarify non-obvious code behavior - Provide context for decisions - Explain workarounds or temporary solutions - Document external dependencies or assumptions</p> <pre><code># Use binary search for O(log n) performance on sorted data\ndef find_insertion_point(sorted_list: list[int], value: int) -&gt; int:\n    \"\"\"Find the index where value should be inserted to maintain sort order.\"\"\"\n    left, right = 0, len(sorted_list)\n\n    while left &lt; right:\n        mid = (left + right) // 2\n        if sorted_list[mid] &lt; value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\n# Workaround for API rate limiting - retry with exponential backoff\ndef api_request_with_retry(url: str, max_retries: int = 3) -&gt; dict:\n    \"\"\"Make API request with retry logic for rate limiting.\"\"\"\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url)\n            return response.json()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 429:  # Rate limited\n                wait_time = 2 ** attempt  # Exponential backoff\n                time.sleep(wait_time)\n            else:\n                raise\n    raise Exception(f\"Failed after {max_retries} attempts\")\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#when-not-to-comment","title":"When NOT to Comment","text":"<p>Avoid these types of comments: - Stating the obvious - Repeating what the code clearly shows - Outdated or incorrect information</p> <pre><code># Bad - states the obvious\nx = x + 1  # Increment x by 1\nuser_count = len(users)  # Get the length of users list\n\n# Good - explains why\nx = x + 1  # Compensate for zero-based indexing\nuser_count = len(users)  # Cache count to avoid repeated calculations\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#documentation-tools","title":"Documentation Tools","text":""},{"location":"dev-guide/clean-code/documentation/#sphinx","title":"Sphinx","text":"<p>Generate documentation from docstrings:</p> pipconda/mambauvpoetry <pre><code>pip install sphinx\nsphinx-quickstart\nsphinx-build -b html source build\n</code></pre> <pre><code>conda install -c conda-forge sphinx\n# or\nmamba install -c conda-forge sphinx\nsphinx-quickstart\nsphinx-build -b html source build\n</code></pre> <pre><code>uv add sphinx\nsphinx-quickstart\nsphinx-build -b html source build\n</code></pre> <pre><code>poetry add sphinx --group dev\nsphinx-quickstart\nsphinx-build -b html source build\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#mkdocs","title":"MkDocs","text":"<p>Create documentation websites:</p> pipconda/mambauvpoetry <pre><code>pip install mkdocs\nmkdocs new my-project\nmkdocs serve\n</code></pre> <pre><code>conda install -c conda-forge mkdocs\n# or\nmamba install -c conda-forge mkdocs\nmkdocs new my-project\nmkdocs serve\n</code></pre> <pre><code>uv add mkdocs\nmkdocs new my-project\nmkdocs serve\n</code></pre> <pre><code>poetry add mkdocs --group dev\nmkdocs new my-project\nmkdocs serve\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#pydoc","title":"Pydoc","text":"<p>Built-in Python documentation generator:</p> <pre><code>python -m pydoc -w mymodule\npython -m pydoc -p 8080  # Start web server\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#type-hints-as-documentation","title":"Type Hints as Documentation","text":"<p>Type hints serve as inline documentation:</p> <pre><code>from typing import Optional, Union\nfrom pathlib import Path\n\ndef load_config(\n    config_path: Path,\n    default_values: Optional[dict[str, str]] = None,\n    format_type: Union[str, None] = None\n) -&gt; dict[str, str]:\n    \"\"\"Load configuration from file.\n\n    The type hints clearly show:\n    - config_path must be a Path object\n    - default_values is optional and should be a string dict\n    - format_type can be a string or None\n    - Returns a string dictionary\n    \"\"\"\n    pass\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#documentation-best-practices","title":"Documentation Best Practices","text":""},{"location":"dev-guide/clean-code/documentation/#1-keep-documentation-current","title":"1. Keep Documentation Current","text":"<pre><code>def process_data(data: list[dict]) -&gt; list[dict]:\n    \"\"\"Process research data records.\n\n    Note: Update this docstring when changing the algorithm!\n\n    Args:\n        data: List of data records as dictionaries.\n\n    Returns:\n        Processed data records.\n    \"\"\"\n    # When you modify this function, update the docstring too\n    pass\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#2-use-examples","title":"2. Use Examples","text":"<pre><code>def format_citation(authors: list[str], title: str, year: int) -&gt; str:\n    \"\"\"Format a research paper citation.\n\n    Args:\n        authors: List of author names.\n        title: Paper title.\n        year: Publication year.\n\n    Returns:\n        Formatted citation string.\n\n    Example:\n        &gt;&gt;&gt; authors = [\"Smith, J.\", \"Doe, A.\"]\n        &gt;&gt;&gt; citation = format_citation(authors, \"Research Methods\", 2023)\n        &gt;&gt;&gt; print(citation)\n        Smith, J., &amp; Doe, A. (2023). Research Methods.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#3-document-edge-cases","title":"3. Document Edge Cases","text":"<pre><code>def calculate_percentage(part: float, whole: float) -&gt; float:\n    \"\"\"Calculate percentage.\n\n    Args:\n        part: The part value.\n        whole: The whole value.\n\n    Returns:\n        Percentage as a float (0-100).\n\n    Raises:\n        ZeroDivisionError: If whole is zero.\n        ValueError: If part or whole is negative.\n\n    Note:\n        Returns 0.0 if both part and whole are zero.\n    \"\"\"\n    if whole == 0 and part == 0:\n        return 0.0\n    if whole == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    if part &lt; 0 or whole &lt; 0:\n        raise ValueError(\"Values must be non-negative\")\n\n    return (part / whole) * 100\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#4-use-consistent-style","title":"4. Use Consistent Style","text":"<p>Choose one docstring style and stick to it throughout your project:</p> <ul> <li>Google Style: Clear sections (Args, Returns, Raises)</li> <li>NumPy Style: Similar to Google but different formatting</li> <li>Sphinx Style: Uses reStructuredText markup</li> </ul>"},{"location":"dev-guide/clean-code/documentation/#5-document-public-apis","title":"5. Document Public APIs","text":"<p>Focus documentation efforts on public interfaces:</p> <pre><code>class DataAnalyzer:\n    \"\"\"Public class for data analysis.\"\"\"\n\n    def analyze(self, data: list) -&gt; dict:\n        \"\"\"Public method - needs full documentation.\"\"\"\n        return self._internal_process(data)\n\n    def _internal_process(self, data: list) -&gt; dict:\n        \"\"\"Private method - minimal documentation is fine.\"\"\"\n        # Implementation details\n        pass\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#readme-files","title":"README Files","text":"<p>Every project should have a comprehensive README:</p> <pre><code># Project Name\n\nBrief description of what this project does.\n\n## Installation\n\n```bash\npip install -r requirements.txt\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#usage","title":"Usage","text":"<pre><code>from myproject import MyClass\n\nanalyzer = MyClass()\nresult = analyzer.process(data)\n</code></pre>"},{"location":"dev-guide/clean-code/documentation/#api-reference","title":"API Reference","text":"<p>Link to detailed API documentation.</p>"},{"location":"dev-guide/clean-code/documentation/#contributing","title":"Contributing","text":"<p>Guidelines for contributors.</p>"},{"location":"dev-guide/clean-code/documentation/#license","title":"License","text":"<p>License information. ```</p> <p>Good documentation makes your code accessible to others (including your future self). Invest time in writing clear, helpful documentation that explains not just what your code does, but why it does it.</p>"},{"location":"dev-guide/clean-code/linting-formatting/","title":"Linting and Formatting","text":"<p>Linting helps identify programming errors, bugs, stylistic errors, and suspicious constructs. Formatting ensures consistent code style across your project.</p>"},{"location":"dev-guide/clean-code/linting-formatting/#ruff-the-modern-python-linter-and-formatter","title":"Ruff: The Modern Python Linter and Formatter","text":"<p>Ruff is an extremely fast Python linter and code formatter, written in Rust. It's designed to replace multiple tools (Flake8, isort, Black, and more) with a single, unified tool that's 10-100x faster than existing alternatives.</p>"},{"location":"dev-guide/clean-code/linting-formatting/#key-features","title":"Key Features","text":"<ul> <li>Speed: 10-100x faster than existing Python linters</li> <li>Comprehensive: Implements over 800 lint rules from popular tools</li> <li>All-in-one: Combines linting, formatting, and import sorting</li> <li>Compatible: Drop-in replacement for Flake8, isort, and other tools</li> <li>Configurable: Highly customizable via <code>pyproject.toml</code></li> </ul>"},{"location":"dev-guide/clean-code/linting-formatting/#installation","title":"Installation","text":"pipconda/mambauvpoetry <pre><code>pip install ruff\n</code></pre> <pre><code>conda install -c conda-forge ruff\n# or\nmamba install -c conda-forge ruff\n</code></pre> <pre><code>uv add ruff\n</code></pre> <pre><code>poetry add ruff --group dev\n</code></pre>"},{"location":"dev-guide/clean-code/linting-formatting/#basic-usage","title":"Basic Usage","text":"<pre><code># Linting - check for issues\nruff check .\n\n# Formatting - format code\nruff format .\n\n# Auto-fix issues where possible\nruff check --fix .\n\n# Check specific files\nruff check src/main.py tests/\n\n# Format specific files\nruff format src/main.py\n</code></pre>"},{"location":"dev-guide/clean-code/linting-formatting/#configuration","title":"Configuration","text":"<p>Configure Ruff in your <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\n# Set the maximum line length to 88.\nline-length = 88\n\n# Assume Python 3.8+\ntarget-version = \"py38\"\n\n# Exclude specific directories\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"venv\",\n]\n\n[tool.ruff.lint]\n# Enable specific rule sets\nselect = [\n    \"E\",   # pycodestyle errors\n    \"W\",   # pycodestyle warnings\n    \"F\",   # pyflakes\n    \"I\",   # isort\n    \"B\",   # flake8-bugbear\n    \"C4\",  # flake8-comprehensions\n    \"UP\",  # pyupgrade\n    \"N\",   # pep8-naming\n    \"D\",   # pydocstyle\n]\n\n# Ignore specific rules\nignore = [\n    \"E501\",  # line too long (handled by formatter)\n    \"D100\",  # missing docstring in public module\n    \"D104\",  # missing docstring in public package\n]\n\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[tool.ruff.format]\n# Use double quotes for strings.\nquote-style = \"double\"\n\n# Indent with spaces, rather than tabs.\nindent-style = \"space\"\n\n# Respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# Automatically detect the appropriate line ending.\nline-ending = \"auto\"\n</code></pre>"},{"location":"dev-guide/clean-code/linting-formatting/#rule-categories","title":"Rule Categories","text":"<p>Ruff supports rules from many popular linters:</p> Code Tool Description E, W pycodestyle Style violations F pyflakes Logical errors I isort Import sorting B flake8-bugbear Bug-prone patterns C4 flake8-comprehensions Comprehension improvements UP pyupgrade Python version upgrades N pep8-naming Naming conventions D pydocstyle Docstring style"},{"location":"dev-guide/clean-code/linting-formatting/#traditional-linting-tools","title":"Traditional Linting Tools","text":"<p>While Ruff is becoming the modern standard, you may still encounter these traditional tools:</p>"},{"location":"dev-guide/clean-code/linting-formatting/#pylint","title":"Pylint","text":"<p>A comprehensive linter that checks for errors, enforces coding standards, and looks for code smells.</p> <p>Installation:</p> pipconda/mambauvpoetry <pre><code>pip install pylint\n</code></pre> <pre><code>conda install -c conda-forge pylint\n# or\nmamba install -c conda-forge pylint\n</code></pre> <pre><code>uv add pylint\n</code></pre> <pre><code>poetry add pylint --group dev\n</code></pre> <p>Usage: <pre><code>pylint your_script.py\npylint src/\n\n# Generate config file\npylint --generate-rcfile &gt; .pylintrc\n</code></pre></p>"},{"location":"dev-guide/clean-code/linting-formatting/#flake8","title":"Flake8","text":"<p>Combines PyFlakes, pycodestyle, and McCabe complexity checker.</p> <p>Installation:</p> pipconda/mambauvpoetry <pre><code>pip install flake8\n</code></pre> <pre><code>conda install -c conda-forge flake8\n# or\nmamba install -c conda-forge flake8\n</code></pre> <pre><code>uv add flake8\n</code></pre> <pre><code>poetry add flake8 --group dev\n</code></pre> <p>Usage: <pre><code>flake8 your_script.py\nflake8 src/\n\n# Configuration in setup.cfg\n[flake8]\nmax-line-length = 88\nexclude = .git,__pycache__,build,dist\n</code></pre></p>"},{"location":"dev-guide/clean-code/linting-formatting/#mypy","title":"Mypy","text":"<p>A static type checker for Python.</p> <p>Installation:</p> pipconda/mambauvpoetry <pre><code>pip install mypy\n</code></pre> <pre><code>conda install -c conda-forge mypy\n# or\nmamba install -c conda-forge mypy\n</code></pre> <pre><code>uv add mypy\n</code></pre> <pre><code>poetry add mypy --group dev\n</code></pre> <p>Usage: <pre><code>mypy your_script.py\nmypy src/\n\n# Configuration in mypy.ini\n[mypy]\npython_version = 3.8\nwarn_return_any = True\nwarn_unused_configs = True\ndisallow_untyped_defs = True\n</code></pre></p>"},{"location":"dev-guide/clean-code/linting-formatting/#traditional-formatting-tools","title":"Traditional Formatting Tools","text":""},{"location":"dev-guide/clean-code/linting-formatting/#black","title":"Black","text":"<p>An opinionated formatter that adheres to PEP 8 guidelines.</p> <p>Installation:</p> pipconda/mambauvpoetry <pre><code>pip install black\n</code></pre> <pre><code>conda install -c conda-forge black\n# or\nmamba install -c conda-forge black\n</code></pre> <pre><code>uv add black\n</code></pre> <pre><code>poetry add black --group dev\n</code></pre> <p>Usage: <pre><code>black your_script.py\nblack src/\n\n# Configuration in pyproject.toml\n[tool.black]\nline-length = 88\ntarget-version = ['py38']\n</code></pre></p>"},{"location":"dev-guide/clean-code/linting-formatting/#isort","title":"isort","text":"<p>A utility to sort imports alphabetically and automatically separate them into sections.</p> <p>Installation:</p> pipconda/mambauvpoetry <pre><code>pip install isort\n</code></pre> <pre><code>conda install -c conda-forge isort\n# or\nmamba install -c conda-forge isort\n</code></pre> <pre><code>uv add isort\n</code></pre> <pre><code>poetry add isort --group dev\n</code></pre> <p>Usage: <pre><code>isort your_script.py\nisort src/\n\n# Configuration in pyproject.toml\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\nline_length = 88\n</code></pre></p>"},{"location":"dev-guide/clean-code/linting-formatting/#choosing-your-tools","title":"Choosing Your Tools","text":""},{"location":"dev-guide/clean-code/linting-formatting/#modern-approach-recommended","title":"Modern Approach (Recommended)","text":"<p>Use Ruff for most projects: - Ruff for linting and formatting - Mypy for type checking - Pytest for testing</p>"},{"location":"dev-guide/clean-code/linting-formatting/#traditional-approach","title":"Traditional Approach","text":"<p>If you need specific features not in Ruff: - Black for formatting - isort for import sorting - Flake8 for linting - Mypy for type checking</p>"},{"location":"dev-guide/clean-code/linting-formatting/#integration-examples","title":"Integration Examples","text":""},{"location":"dev-guide/clean-code/linting-formatting/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.6\n    hooks:\n      - id: ruff\n        args: [--fix]\n      - id: ruff-format\n</code></pre>"},{"location":"dev-guide/clean-code/linting-formatting/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/lint.yml\nname: Lint\non: [push, pull_request]\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - run: pip install ruff\n      - run: ruff check .\n      - run: ruff format --check .\n</code></pre>"},{"location":"dev-guide/clean-code/linting-formatting/#vs-code-settings","title":"VS Code Settings","text":"<pre><code>{\n    \"python.linting.enabled\": true,\n    \"python.linting.ruffEnabled\": true,\n    \"python.formatting.provider\": \"ruff\",\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n}\n</code></pre>"},{"location":"dev-guide/clean-code/linting-formatting/#best-practices","title":"Best Practices","text":"<ol> <li>Start Early: Set up linting and formatting from the beginning of your project</li> <li>Automate: Use pre-commit hooks and CI/CD to enforce standards</li> <li>Be Consistent: Choose one set of tools and stick with them</li> <li>Configure Appropriately: Adjust rules for your project's needs</li> <li>Fix Gradually: Don't try to fix all issues at once in existing projects</li> </ol> <p>Remember: The goal is to improve code quality and consistency, not to achieve perfect scores on all metrics.</p>"},{"location":"dev-guide/clean-code/python-standards/","title":"Python Standards","text":""},{"location":"dev-guide/clean-code/python-standards/#what-are-peps","title":"What are PEPs?","text":"<p>PEP stands for Python Enhancement Proposal. PEPs are design documents that provide information to the Python community or describe new features for Python or its processes. They serve as the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.</p> <p>PEPs are numbered documents that cover various aspects of Python development, from language syntax changes to coding standards and best practices. Understanding and following relevant PEPs ensures your code aligns with Python community standards and best practices.</p>"},{"location":"dev-guide/clean-code/python-standards/#types-of-peps","title":"Types of PEPs","text":"<p>PEPs are categorized into different types:</p> <ul> <li>Standards Track PEPs: Describe new language features or implementations</li> <li>Informational PEPs: Provide general guidelines or information to the Python community</li> <li>Process PEPs: Describe processes surrounding Python development</li> </ul>"},{"location":"dev-guide/clean-code/python-standards/#key-peps-for-clean-code","title":"Key PEPs for Clean Code","text":"<p>Understanding these Python Enhancement Proposals will help you write better, more standardized Python code:</p>"},{"location":"dev-guide/clean-code/python-standards/#core-style-and-standards","title":"Core Style and Standards","text":"<ul> <li>PEP 8: Style Guide for Python Code - The fundamental style guide</li> <li>PEP 257: Docstring Conventions - Standards for documentation strings</li> </ul>"},{"location":"dev-guide/clean-code/python-standards/#type-system","title":"Type System","text":"<ul> <li>PEP 484: Type Hints - Introduction of type annotations</li> <li>PEP 526: Variable Annotations - Type hints for variables</li> <li>PEP 544: Protocols - Structural subtyping (duck typing)</li> <li>PEP 585: Type Hinting Generics - Using built-in collections for type hints</li> <li>PEP 604: Union Operators - Using <code>|</code> for union types</li> </ul>"},{"location":"dev-guide/clean-code/python-standards/#modern-python-features","title":"Modern Python Features","text":"<ul> <li>PEP 498: Literal String Interpolation (f-strings)</li> <li>PEP 570: Positional-Only Parameters</li> <li>PEP 572: Assignment Expressions (walrus operator <code>:=</code>)</li> </ul>"},{"location":"dev-guide/clean-code/python-standards/#import-and-module-organization","title":"Import and Module Organization","text":"<ul> <li>PEP 328: Imports: Multi-Line and Absolute/Relative</li> <li>PEP 420: Implicit Namespace Packages</li> </ul>"},{"location":"dev-guide/clean-code/python-standards/#why-follow-peps","title":"Why Follow PEPs?","text":"<p>Following PEPs ensures:</p> <ol> <li>Consistency: Your code follows established patterns</li> <li>Readability: Other Python developers can easily understand your code</li> <li>Maintainability: Standard practices make code easier to maintain</li> <li>Tool Compatibility: Linters and formatters work better with standard code</li> <li>Community Acceptance: Your code fits well in the broader Python ecosystem</li> </ol>"},{"location":"dev-guide/clean-code/python-standards/#staying-updated","title":"Staying Updated","text":"<p>PEPs evolve over time. Stay informed by:</p> <ul> <li>Regularly checking python.org/dev/peps/</li> <li>Following Python development discussions</li> <li>Using modern linting tools that incorporate latest standards</li> <li>Participating in Python community forums and discussions</li> </ul> <p>Remember: PEPs are guidelines, not rigid rules. Use judgment when applying them to your specific research context.</p>"},{"location":"dev-guide/clean-code/style-guidelines/","title":"Style Guidelines","text":""},{"location":"dev-guide/clean-code/style-guidelines/#pep-8-style-guide-for-python-code","title":"PEP 8: Style Guide for Python Code","text":"<p>PEP 8 is the official style guide for Python code. Following PEP 8 ensures consistency across Python projects. Key points include:</p>"},{"location":"dev-guide/clean-code/style-guidelines/#indentation","title":"Indentation","text":"<ul> <li>Use 4 spaces per indentation level</li> <li>Never mix tabs and spaces</li> <li>Continuation lines should align wrapped elements</li> </ul> <pre><code># Correct\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# Incorrect\ndef long_function_name(\n    var_one, var_two, var_three,\n    var_four):\n    print(var_one)\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#maximum-line-length","title":"Maximum Line Length","text":"<ul> <li>Limit lines to 79 characters for code</li> <li>Limit lines to 72 characters for comments and docstrings</li> <li>Some teams use 88 characters (Black formatter default)</li> </ul> <pre><code># Correct - break long lines\nresult = some_function_that_takes_arguments(\n    'a', 'b', 'c', 'd', 'e', 'f'\n)\n\n# Incorrect - too long\nresult = some_function_that_takes_arguments('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#imports","title":"Imports","text":"<p>Place imports at the top of the file, grouped in the following order:</p> <ol> <li>Standard library imports</li> <li>Related third-party imports</li> <li>Local application/library specific imports</li> </ol> <pre><code># Standard library\nimport os\nimport sys\nfrom pathlib import Path\n\n# Third-party\nimport numpy as np\nimport pandas as pd\nimport requests\n\n# Local\nfrom myproject import mymodule\nfrom . import sibling_module\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#whitespace","title":"Whitespace","text":"<ul> <li>Use blank lines to separate functions and classes</li> <li>Use blank lines sparingly inside functions to separate logical sections</li> <li>Avoid extraneous whitespace</li> </ul> <pre><code># Correct\nspam(ham[1], {eggs: 2})\n\n# Incorrect\nspam( ham[ 1 ], { eggs: 2 } )\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#naming-conventions","title":"Naming Conventions","text":"Type Convention Example Functions, variables, attributes <code>lowercase_with_underscores</code> <code>my_function</code>, <code>user_name</code> Classes <code>CapitalizedWords</code> <code>MyClass</code>, <code>HTTPServer</code> Constants <code>ALL_CAPS</code> <code>MAX_SIZE</code>, <code>DEFAULT_TIMEOUT</code> Private attributes <code>_leading_underscore</code> <code>_internal_var</code> Protected attributes <code>__double_leading_underscore</code> <code>__private_var</code> <pre><code># Correct naming\nclass DataProcessor:\n    MAX_ITEMS = 1000\n\n    def __init__(self):\n        self.item_count = 0\n        self._internal_state = {}\n\n    def process_data(self, input_data):\n        return self._clean_data(input_data)\n\n    def _clean_data(self, data):\n        # Private method\n        return data.strip()\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#comments","title":"Comments","text":"<ul> <li>Use inline comments sparingly</li> <li>Comments should be complete sentences</li> <li>Update comments when code changes</li> </ul> <pre><code># Correct - explains why, not what\nx = x + 1  # Compensate for border\n\n# Incorrect - states the obvious\nx = x + 1  # Increment x\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#beyond-pep-8","title":"Beyond PEP 8","text":"<p>While PEP 8 is fundamental, consider these additional style principles:</p>"},{"location":"dev-guide/clean-code/style-guidelines/#consistency","title":"Consistency","text":"<ul> <li>Be consistent within a project</li> <li>Follow existing code style in a codebase</li> <li>Use automated formatters to maintain consistency</li> </ul>"},{"location":"dev-guide/clean-code/style-guidelines/#readability","title":"Readability","text":"<ul> <li>Choose descriptive names over short ones</li> <li>Avoid abbreviations unless they're widely understood</li> <li>Use meaningful variable names</li> </ul> <pre><code># Good\nuser_count = len(active_users)\nfor user in active_users:\n    send_notification(user)\n\n# Poor\nn = len(u)\nfor x in u:\n    send_notification(x)\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#simplicity","title":"Simplicity","text":"<ul> <li>Prefer simple, straightforward solutions</li> <li>Avoid clever code that's hard to understand</li> <li>Use built-in functions when appropriate</li> </ul> <pre><code># Good - clear and simple\nnumbers = [1, 2, 3, 4, 5]\nsquares = [n ** 2 for n in numbers]\n\n# Overly complex\nsquares = list(map(lambda x: x ** 2, numbers))\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#modern-style-considerations","title":"Modern Style Considerations","text":""},{"location":"dev-guide/clean-code/style-guidelines/#f-strings-pep-498","title":"F-strings (PEP 498)","text":"<p>Prefer f-strings for string formatting:</p> <pre><code># Modern (Python 3.6+)\nname = \"Alice\"\nage = 30\nmessage = f\"Hello, {name}! You are {age} years old.\"\n\n# Older style\nmessage = \"Hello, {}! You are {} years old.\".format(name, age)\nmessage = \"Hello, %s! You are %d years old.\" % (name, age)\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#pathlib","title":"Pathlib","text":"<p>Use <code>pathlib</code> for file system operations:</p> <pre><code># Modern\nfrom pathlib import Path\n\nconfig_file = Path(\"config\") / \"settings.json\"\nif config_file.exists():\n    content = config_file.read_text()\n\n# Older style\nimport os\n\nconfig_file = os.path.join(\"config\", \"settings.json\")\nif os.path.exists(config_file):\n    with open(config_file, 'r') as f:\n        content = f.read()\n</code></pre>"},{"location":"dev-guide/clean-code/style-guidelines/#automated-style-checking","title":"Automated Style Checking","text":"<p>Use tools to automatically check and enforce style:</p> <ul> <li>Ruff: Modern, fast linter and formatter</li> <li>Black: Opinionated code formatter</li> <li>isort: Import statement organizer</li> <li>Flake8: Style guide enforcement</li> </ul> <p>These tools help maintain consistent style across your codebase without manual effort.</p>"},{"location":"dev-guide/clean-code/type-hints/","title":"Type Hints","text":"<p>Type hints, introduced in PEP 484, enable static type checking and improve code clarity. They help catch type-related errors early and make code more self-documenting.</p>"},{"location":"dev-guide/clean-code/type-hints/#why-use-type-hints","title":"Why Use Type Hints?","text":"<ol> <li>Early Error Detection: Catch type-related bugs before runtime</li> <li>Better IDE Support: Enhanced autocomplete and refactoring</li> <li>Self-Documenting Code: Types serve as inline documentation</li> <li>Improved Maintainability: Easier to understand and modify code</li> <li>Tool Integration: Better support from linters and static analyzers</li> </ol>"},{"location":"dev-guide/clean-code/type-hints/#basic-type-hints","title":"Basic Type Hints","text":""},{"location":"dev-guide/clean-code/type-hints/#function-annotations","title":"Function Annotations","text":"<pre><code>def greet(name: str) -&gt; str:\n    \"\"\"Greet a person by name.\"\"\"\n    return f\"Hello, {name}!\"\n\ndef add_numbers(a: int, b: int) -&gt; int:\n    \"\"\"Add two integers.\"\"\"\n    return a + b\n\ndef calculate_average(numbers: list[float]) -&gt; float:\n    \"\"\"Calculate the average of a list of numbers.\"\"\"\n    return sum(numbers) / len(numbers)\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#variable-annotations","title":"Variable Annotations","text":"<pre><code># Python 3.6+ variable annotations\nname: str = \"Alice\"\nage: int = 30\nheight: float = 5.6\nis_student: bool = True\n\n# For variables without initial values\nuser_id: int\nconfig: dict[str, str]\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#built-in-types","title":"Built-in Types","text":""},{"location":"dev-guide/clean-code/type-hints/#basic-types","title":"Basic Types","text":"<pre><code>def process_data(\n    text: str,\n    count: int,\n    ratio: float,\n    is_valid: bool\n) -&gt; None:\n    print(f\"Processing {text} with {count} items\")\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#collection-types-python-39","title":"Collection Types (Python 3.9+)","text":"<pre><code># Lists\ndef process_names(names: list[str]) -&gt; list[str]:\n    return [name.title() for name in names]\n\n# Dictionaries\ndef get_user_info() -&gt; dict[str, str]:\n    return {\"name\": \"Alice\", \"email\": \"alice@example.com\"}\n\n# Sets\ndef get_unique_ids(data: list[int]) -&gt; set[int]:\n    return set(data)\n\n# Tuples\ndef get_coordinates() -&gt; tuple[float, float]:\n    return (10.5, 20.3)\n\n# Tuple with variable length\ndef get_scores() -&gt; tuple[int, ...]:\n    return (85, 92, 78, 96)\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#optional-and-union-types","title":"Optional and Union Types","text":"<pre><code>from typing import Optional, Union\n\n# Optional (can be None)\ndef find_user(user_id: int) -&gt; Optional[str]:\n    \"\"\"Find a user by ID, return None if not found.\"\"\"\n    # Implementation here\n    return None\n\n# Union types (Python 3.10+)\ndef handle_input(value: str | int) -&gt; str:\n    \"\"\"Handle data that can be either string or integer.\"\"\"\n    return str(value)\n\n# Older syntax (before Python 3.10)\ndef handle_data(data: Union[str, int]) -&gt; str:\n    return str(data)\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#advanced-type-hints","title":"Advanced Type Hints","text":""},{"location":"dev-guide/clean-code/type-hints/#generic-types","title":"Generic Types","text":"<pre><code>from typing import TypeVar, Generic\n\nT = TypeVar('T')\n\nclass Stack(Generic[T]):\n    def __init__(self) -&gt; None:\n        self._items: list[T] = []\n\n    def push(self, item: T) -&gt; None:\n        self._items.append(item)\n\n    def pop(self) -&gt; T:\n        return self._items.pop()\n\n    def is_empty(self) -&gt; bool:\n        return len(self._items) == 0\n\n# Usage\nstring_stack: Stack[str] = Stack()\nstring_stack.push(\"hello\")\n\nint_stack: Stack[int] = Stack()\nint_stack.push(42)\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#callable-types","title":"Callable Types","text":"<pre><code>from typing import Callable\n\ndef apply_operation(\n    numbers: list[int],\n    operation: Callable[[int], int]\n) -&gt; list[int]:\n    \"\"\"Apply an operation to each number in the list.\"\"\"\n    return [operation(num) for num in numbers]\n\n# Usage\ndef square(x: int) -&gt; int:\n    return x ** 2\n\nresult = apply_operation([1, 2, 3, 4], square)\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#protocol-structural-typing","title":"Protocol (Structural Typing)","text":"<pre><code>from typing import Protocol\n\nclass Drawable(Protocol):\n    def draw(self) -&gt; None: ...\n\nclass Circle:\n    def draw(self) -&gt; None:\n        print(\"Drawing a circle\")\n\nclass Square:\n    def draw(self) -&gt; None:\n        print(\"Drawing a square\")\n\ndef render_shape(shape: Drawable) -&gt; None:\n    \"\"\"Render any drawable shape.\"\"\"\n    shape.draw()\n\n# Both Circle and Square can be used\nrender_shape(Circle())\nrender_shape(Square())\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#literal-types","title":"Literal Types","text":"<pre><code>from typing import Literal\n\ndef set_mode(mode: Literal[\"read\", \"write\", \"append\"]) -&gt; None:\n    \"\"\"Set file operation mode.\"\"\"\n    print(f\"Mode set to: {mode}\")\n\n# Valid calls\nset_mode(\"read\")\nset_mode(\"write\")\n\n# This would cause a type error\n# set_mode(\"invalid\")  # Type error\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#type-aliases","title":"Type Aliases","text":"<p>Create aliases for complex types:</p> <pre><code># Type aliases\nUserId = int\nUserData = dict[str, str | int]\nCoordinates = tuple[float, float]\n\ndef create_user(user_id: UserId, data: UserData) -&gt; None:\n    print(f\"Creating user {user_id} with data {data}\")\n\ndef calculate_distance(point1: Coordinates, point2: Coordinates) -&gt; float:\n    x1, y1 = point1\n    x2, y2 = point2\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#modern-type-hints-python-39","title":"Modern Type Hints (Python 3.9+)","text":""},{"location":"dev-guide/clean-code/type-hints/#built-in-collections","title":"Built-in Collections","text":"<pre><code># Python 3.9+ - use built-in types directly\ndef process_data(items: list[str]) -&gt; dict[str, int]:\n    return {item: len(item) for item in items}\n\ndef merge_configs(\n    config1: dict[str, str],\n    config2: dict[str, str]\n) -&gt; dict[str, str]:\n    return {**config1, **config2}\n\n# Before Python 3.9 - needed typing module\nfrom typing import List, Dict\n\ndef process_data_old(items: List[str]) -&gt; Dict[str, int]:\n    return {item: len(item) for item in items}\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#union-operator-python-310","title":"Union Operator (Python 3.10+)","text":"<pre><code># Python 3.10+ - use | for unions\ndef process_value(value: str | int | float) -&gt; str:\n    return str(value)\n\ndef find_item(items: list[str], query: str) -&gt; str | None:\n    for item in items:\n        if query in item:\n            return item\n    return None\n\n# Before Python 3.10\nfrom typing import Union\n\ndef process_value_old(value: Union[str, int, float]) -&gt; str:\n    return str(value)\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#type-checking-with-mypy","title":"Type Checking with Mypy","text":"<p>Install and use Mypy for static type checking:</p> pipconda/mambauvpoetry <pre><code>pip install mypy\nmypy your_script.py\n</code></pre> <pre><code>conda install -c conda-forge mypy\n# or\nmamba install -c conda-forge mypy\nmypy your_script.py\n</code></pre> <pre><code>uv add mypy\nmypy your_script.py\n</code></pre> <pre><code>poetry add mypy --group dev\nmypy your_script.py\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#mypy-configuration","title":"Mypy Configuration","text":"<p>Create a <code>mypy.ini</code> file:</p> <pre><code>[mypy]\npython_version = 3.8\nwarn_return_any = True\nwarn_unused_configs = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\ncheck_untyped_defs = True\ndisallow_untyped_decorators = True\n</code></pre> <p>Or configure in <code>pyproject.toml</code>:</p> <pre><code>[tool.mypy]\npython_version = \"3.8\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\ncheck_untyped_defs = true\ndisallow_untyped_decorators = true\n\n# Per-module options\n[[tool.mypy.overrides]]\nmodule = \"tests.*\"\ndisallow_untyped_defs = false\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#best-practices","title":"Best Practices","text":""},{"location":"dev-guide/clean-code/type-hints/#1-start-gradually","title":"1. Start Gradually","text":"<pre><code># Start with function signatures\ndef calculate_total(prices: list[float]) -&gt; float:\n    return sum(prices)\n\n# Add variable annotations where helpful\ntotal_price: float = calculate_total([10.99, 5.50, 3.25])\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#2-use-specific-types","title":"2. Use Specific Types","text":"<pre><code># Good - specific\ndef get_user_ages() -&gt; dict[str, int]:\n    return {\"alice\": 30, \"bob\": 25}\n\n# Less helpful - too generic\ndef get_user_ages() -&gt; dict:\n    return {\"alice\": 30, \"bob\": 25}\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#3-handle-optional-values","title":"3. Handle Optional Values","text":"<pre><code>def find_user(user_id: int) -&gt; Optional[dict[str, str]]:\n    # Always handle the None case\n    user = database.get_user(user_id)\n    if user is None:\n        return None\n    return {\"name\": user.name, \"email\": user.email}\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#4-use-type-aliases-for-complex-types","title":"4. Use Type Aliases for Complex Types","text":"<pre><code># Define complex types once\nJSONData = dict[str, str | int | float | bool | None]\nAPIResponse = dict[str, JSONData | list[JSONData]]\n\ndef process_api_response(response: APIResponse) -&gt; None:\n    # Implementation here\n    pass\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#common-patterns","title":"Common Patterns","text":""},{"location":"dev-guide/clean-code/type-hints/#factory-functions","title":"Factory Functions","text":"<pre><code>from typing import TypeVar\n\nT = TypeVar('T')\n\ndef create_list(item_type: type[T], *items: T) -&gt; list[T]:\n    return list(items)\n\n# Usage\nnumbers = create_list(int, 1, 2, 3)  # list[int]\nnames = create_list(str, \"a\", \"b\", \"c\")  # list[str]\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#context-managers","title":"Context Managers","text":"<pre><code>from typing import Iterator\nfrom contextlib import contextmanager\n\n@contextmanager\ndef database_transaction() -&gt; Iterator[None]:\n    # Setup\n    begin_transaction()\n    try:\n        yield\n    except Exception:\n        rollback_transaction()\n        raise\n    else:\n        commit_transaction()\n</code></pre>"},{"location":"dev-guide/clean-code/type-hints/#integration-with-ides","title":"Integration with IDEs","text":"<p>Most modern IDEs support type hints:</p> <ul> <li>VS Code: Install Python extension for full type checking support</li> <li>PyCharm: Built-in type checking and inference</li> <li>Vim/Neovim: Use language servers like Pylsp or Pyright</li> </ul> <p>Type hints make your code more professional, maintainable, and less prone to bugs. Start using them in new code and gradually add them to existing projects.</p>"},{"location":"dev-guide/clean-code/workflow-integration/","title":"Workflow Integration","text":"<p>Integrating code quality tools into your development workflow ensures consistent standards without manual effort. This section covers automation strategies for maintaining clean code.</p>"},{"location":"dev-guide/clean-code/workflow-integration/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Pre-commit runs checks automatically before each commit, catching issues early.</p>"},{"location":"dev-guide/clean-code/workflow-integration/#installation-and-setup","title":"Installation and Setup","text":"<p>Install pre-commit:</p> pipconda/mambauvpoetry <pre><code>pip install pre-commit\n</code></pre> <pre><code>conda install -c conda-forge pre-commit\n# or\nmamba install -c conda-forge pre-commit\n</code></pre> <pre><code>uv add pre-commit\n</code></pre> <pre><code>poetry add pre-commit --group dev\n</code></pre> <p>Setup: <pre><code># Create configuration file\ntouch .pre-commit-config.yaml\n\n# Install git hooks\npre-commit install\n</code></pre></p>"},{"location":"dev-guide/clean-code/workflow-integration/#configuration-with-ruff","title":"Configuration with Ruff","text":"<p>Create a <code>.pre-commit-config.yaml</code> file:</p> <pre><code>repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.6\n    hooks:\n      - id: ruff\n        args: [--fix]\n      - id: ruff-format\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n      - id: mypy\n        additional_dependencies: [types-requests]\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-added-large-files\n      - id: check-merge-conflict\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#traditional-tools-configuration","title":"Traditional Tools Configuration","text":"<p>If using traditional tools instead of Ruff:</p> <pre><code>repos:\n  - repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n      - id: flake8\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n      - id: mypy\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#running-pre-commit","title":"Running Pre-commit","text":"<pre><code># Run on all files\npre-commit run --all-files\n\n# Run on specific files\npre-commit run --files src/main.py\n\n# Skip hooks for emergency commits\ngit commit --no-verify -m \"Emergency fix\"\n\n# Update hook versions\npre-commit autoupdate\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#continuous-integration-cicd","title":"Continuous Integration (CI/CD)","text":"<p>Automate code quality checks in your CI/CD pipeline to ensure all code meets standards.</p>"},{"location":"dev-guide/clean-code/workflow-integration/#github-actions","title":"GitHub Actions","text":"<p>Create <code>.github/workflows/code-quality.yml</code>:</p> <pre><code>name: Code Quality\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  code-quality:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install ruff mypy pytest\n        pip install -r requirements.txt\n\n    - name: Lint with Ruff\n      run: |\n        ruff check .\n        ruff format --check .\n\n    - name: Type check with MyPy\n      run: mypy src/\n\n    - name: Run tests\n      run: pytest tests/\n\n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v3\n      if: success()\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#gitlab-ci","title":"GitLab CI","text":"<p>Create <code>.gitlab-ci.yml</code>:</p> <pre><code>stages:\n  - quality\n  - test\n\ncode-quality:\n  stage: quality\n  image: python:3.11\n  before_script:\n    - pip install ruff mypy\n  script:\n    - ruff check .\n    - ruff format --check .\n    - mypy src/\n  only:\n    - merge_requests\n    - main\n\ntest:\n  stage: test\n  image: python:3.11\n  before_script:\n    - pip install -r requirements.txt\n    - pip install pytest pytest-cov\n  script:\n    - pytest --cov=src tests/\n  coverage: '/TOTAL.*\\s+(\\d+%)$/'\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: coverage.xml\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#azure-devops","title":"Azure DevOps","text":"<p>Create <code>azure-pipelines.yml</code>:</p> <pre><code>trigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nvariables:\n  pythonVersion: '3.11'\n\nsteps:\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: '$(pythonVersion)'\n  displayName: 'Use Python $(pythonVersion)'\n\n- script: |\n    python -m pip install --upgrade pip\n    pip install ruff mypy pytest\n    pip install -r requirements.txt\n  displayName: 'Install dependencies'\n\n- script: |\n    ruff check .\n    ruff format --check .\n  displayName: 'Lint code'\n\n- script: mypy src/\n  displayName: 'Type check'\n\n- script: pytest tests/ --junitxml=junit/test-results.xml\n  displayName: 'Run tests'\n\n- task: PublishTestResults@2\n  condition: succeededOrFailed()\n  inputs:\n    testResultsFiles: '**/test-*.xml'\n    testRunTitle: 'Publish test results'\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#ide-integration","title":"IDE Integration","text":"<p>Configure your IDE for automatic code quality checks and formatting.</p>"},{"location":"dev-guide/clean-code/workflow-integration/#vs-code","title":"VS Code","text":"<p>Create <code>.vscode/settings.json</code>:</p> <pre><code>{\n    \"python.defaultInterpreterPath\": \"./.venv/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.ruffEnabled\": true,\n    \"python.formatting.provider\": \"ruff\",\n    \"python.linting.mypyEnabled\": true,\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true,\n        \"source.fixAll\": true\n    },\n    \"files.associations\": {\n        \"*.py\": \"python\"\n    },\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.pytestArgs\": [\n        \"tests\"\n    ]\n}\n</code></pre> <p>Install recommended extensions in <code>.vscode/extensions.json</code>:</p> <pre><code>{\n    \"recommendations\": [\n        \"ms-python.python\",\n        \"ms-python.mypy-type-checker\",\n        \"charliermarsh.ruff\",\n        \"ms-python.pytest\"\n    ]\n}\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#pycharm","title":"PyCharm","text":"<p>Configure PyCharm settings:</p> <ol> <li>File \u2192 Settings \u2192 Tools \u2192 External Tools</li> <li>Add Ruff as external tool</li> <li>Command: <code>ruff</code></li> <li> <p>Arguments: <code>check $FilePath$</code></p> </li> <li> <p>File \u2192 Settings \u2192 Editor \u2192 Code Style \u2192 Python</p> </li> <li>Set line length to 88</li> <li> <p>Configure import organization</p> </li> <li> <p>File \u2192 Settings \u2192 Editor \u2192 Inspections</p> </li> <li>Enable Python type checker</li> <li>Configure MyPy integration</li> </ol>"},{"location":"dev-guide/clean-code/workflow-integration/#vimneovim","title":"Vim/Neovim","text":"<p>Example configuration for Neovim with LSP:</p> <pre><code>-- init.lua\nrequire('lspconfig').ruff_lsp.setup {}\nrequire('lspconfig').pyright.setup {}\n\n-- Auto-format on save\nvim.api.nvim_create_autocmd(\"BufWritePre\", {\n  pattern = \"*.py\",\n  callback = function()\n    vim.lsp.buf.format()\n  end,\n})\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#project-configuration","title":"Project Configuration","text":""},{"location":"dev-guide/clean-code/workflow-integration/#pyprojecttoml","title":"pyproject.toml","text":"<p>Centralize all tool configurations:</p> <pre><code>[build-system]\nrequires = [\"setuptools&gt;=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"my-research-project\"\nversion = \"0.1.0\"\ndescription = \"Research project with clean code practices\"\nauthors = [{name = \"Your Name\", email = \"your.email@example.com\"}]\ndependencies = [\n    \"numpy&gt;=1.21.0\",\n    \"pandas&gt;=1.3.0\",\n    \"requests&gt;=2.25.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"ruff&gt;=0.1.0\",\n    \"mypy&gt;=1.5.0\",\n    \"pytest&gt;=7.0.0\",\n    \"pre-commit&gt;=3.0.0\",\n]\n\n[tool.ruff]\nline-length = 88\ntarget-version = \"py38\"\nexclude = [\n    \".git\",\n    \".mypy_cache\",\n    \".ruff_cache\",\n    \".venv\",\n    \"__pycache__\",\n    \"build\",\n    \"dist\",\n]\n\n[tool.ruff.lint]\nselect = [\n    \"E\",   # pycodestyle errors\n    \"W\",   # pycodestyle warnings\n    \"F\",   # pyflakes\n    \"I\",   # isort\n    \"B\",   # flake8-bugbear\n    \"C4\",  # flake8-comprehensions\n    \"UP\",  # pyupgrade\n    \"N\",   # pep8-naming\n]\nignore = [\"E501\"]  # Line too long (handled by formatter)\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\n\n[tool.mypy]\npython_version = \"3.8\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\ncheck_untyped_defs = true\ndisallow_untyped_decorators = true\n\n[[tool.mypy.overrides]]\nmodule = \"tests.*\"\ndisallow_untyped_defs = false\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_functions = [\"test_*\"]\naddopts = [\n    \"--strict-markers\",\n    \"--strict-config\",\n    \"--verbose\",\n    \"--cov=src\",\n    \"--cov-report=term-missing\",\n    \"--cov-report=html\",\n]\n\n[tool.coverage.run]\nsource = [\"src\"]\nomit = [\"tests/*\", \"*/migrations/*\"]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n]\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#makefile-for-common-tasks","title":"Makefile for Common Tasks","text":"<p>Create a <code>Makefile</code> for easy command execution:</p> <pre><code>.PHONY: help install dev-install lint format type-check test clean\n\nhelp:  ## Show this help\n    @grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-20s\\033[0m %s\\n\", $$1, $$2}'\n\ninstall:  ## Install production dependencies\n    pip install -e .\n\ndev-install:  ## Install development dependencies\n    pip install -e \".[dev]\"\n    pre-commit install\n\nlint:  ## Run linting\n    ruff check .\n\nformat:  ## Format code\n    ruff format .\n\ntype-check:  ## Run type checking\n    mypy src/\n\ntest:  ## Run tests\n    pytest\n\ntest-cov:  ## Run tests with coverage\n    pytest --cov=src --cov-report=html\n\nclean:  ## Clean build artifacts\n    rm -rf build/\n    rm -rf dist/\n    rm -rf *.egg-info/\n    rm -rf .coverage\n    rm -rf htmlcov/\n    find . -type d -name __pycache__ -delete\n    find . -type f -name \"*.pyc\" -delete\n\nall: lint type-check test  ## Run all checks\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#docker-integration","title":"Docker Integration","text":"<p>Include code quality checks in your Docker workflow:</p> <pre><code># Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Install dev dependencies for quality checks\nCOPY requirements-dev.txt .\nRUN pip install -r requirements-dev.txt\n\n# Copy source code\nCOPY src/ src/\nCOPY tests/ tests/\nCOPY pyproject.toml .\n\n# Run quality checks\nRUN ruff check .\nRUN ruff format --check .\nRUN mypy src/\nRUN pytest\n\n# Final image without dev dependencies\nFROM python:3.11-slim as production\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY src/ src/\nCMD [\"python\", \"-m\", \"src.main\"]\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#monitoring-and-metrics","title":"Monitoring and Metrics","text":""},{"location":"dev-guide/clean-code/workflow-integration/#code-quality-badges","title":"Code Quality Badges","text":"<p>Add badges to your README to show code quality status:</p> <pre><code># My Research Project\n\n[![Code style: Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![Type checked: mypy](https://img.shields.io/badge/mypy-checked-blue)](https://mypy-lang.org/)\n[![Tests](https://github.com/username/repo/workflows/tests/badge.svg)](https://github.com/username/repo/actions)\n[![Coverage](https://codecov.io/gh/username/repo/branch/main/graph/badge.svg)](https://codecov.io/gh/username/repo)\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#quality-gates","title":"Quality Gates","text":"<p>Set up quality gates in your CI/CD pipeline:</p> <pre><code># GitHub Actions example\n- name: Quality Gate\n  run: |\n    # Fail if coverage is below 80%\n    coverage report --fail-under=80\n\n    # Fail if there are any linting errors\n    ruff check . --exit-non-zero-on-fix\n\n    # Fail if there are type errors\n    mypy src/ --strict\n</code></pre>"},{"location":"dev-guide/clean-code/workflow-integration/#best-practices-for-workflow-integration","title":"Best Practices for Workflow Integration","text":"<ol> <li>Start Simple: Begin with basic linting and formatting</li> <li>Gradual Adoption: Add tools incrementally to avoid overwhelming the team</li> <li>Team Agreement: Ensure all team members agree on the standards</li> <li>Documentation: Document your workflow and tool configurations</li> <li>Regular Updates: Keep tools and configurations up to date</li> <li>Flexibility: Allow exceptions for special cases with proper justification</li> </ol> <p>By integrating these tools into your workflow, you ensure that code quality is maintained automatically, reducing manual effort and improving consistency across your research projects.</p>"},{"location":"dev-guide/getting-started/ide_setup/","title":"Integrated Development Environment (IDE) Setup","text":"<p>An Integrated Development Environment (IDE) can significantly enhance your productivity when conducting research and writing code. This guide covers setting up popular IDEs for Python development, organized by platform for easy navigation.</p> PyCharmVisual Studio CodeJupyter <p>PyCharm is a powerful IDE specifically designed for Python development, offering advanced features like intelligent code completion, debugging, and integrated version control.</p> <p>Visual Studio Code is a lightweight, extensible code editor with excellent Python support through extensions.</p> <p>For interactive computing and data analysis, Jupyter provides notebook environments ideal for reproducible research.</p>"},{"location":"dev-guide/getting-started/ide_setup/#installation","title":"Installation","text":"<ol> <li>Visit the PyCharm website</li> <li>Download PyCharm:<ul> <li>Community Edition: Free, open-source version with essential features</li> <li>Professional Edition: Paid version with additional features (web development, database tools, etc.)</li> </ul> </li> <li>Run the installer and follow the installation prompts</li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Create a New Project:</p> <ul> <li>Open PyCharm and click \"New Project\"</li> <li>Choose your project location</li> <li>Select the Python interpreter (see Python Interpreter Configuration below)</li> </ul> </li> <li> <p>Configure Python Interpreter:</p> <ul> <li>Go to File &gt; Settings (Windows/Linux) or PyCharm &gt; Preferences (macOS)</li> <li>Navigate to Project &gt; Python Interpreter</li> <li>Click the gear icon and select \"Add\"</li> <li>Choose your environment type:</li> <li>Conda Environment: Select existing conda environment or create new</li> <li>Virtual Environment: Select existing venv or create new</li> <li>Poetry Environment: Automatically detected if <code>pyproject.toml</code> exists</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#key-features-and-configuration","title":"Key Features and Configuration","text":""},{"location":"dev-guide/getting-started/ide_setup/#code-quality-tools","title":"Code Quality Tools","text":"<ol> <li> <p>Enable Code Inspections:</p> <ul> <li>Go to Settings &gt; Editor &gt; Inspections</li> <li>Enable Python-specific inspections for better code quality</li> </ul> </li> <li> <p>Configure Code Style:</p> <ul> <li>Go to Settings &gt; Editor &gt; Code Style &gt; Python</li> <li>Set up PEP 8 compliance or import custom style configurations</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#version-control-integration","title":"Version Control Integration","text":"<ol> <li>Git Integration:<ul> <li>PyCharm automatically detects Git repositories</li> <li>Access via VCS menu for commit, push, pull operations</li> <li>Built-in diff viewer and merge conflict resolution</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#scientific-tools-professional-edition","title":"Scientific Tools (Professional Edition)","text":"<ol> <li> <p>Jupyter Notebook Support:</p> <ul> <li>Create and edit <code>.ipynb</code> files directly</li> <li>Run cells interactively within PyCharm</li> </ul> </li> <li> <p>Database Tools:</p> <ul> <li>Connect to databases for data analysis projects</li> <li>SQL query execution and result visualization</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#useful-plugins","title":"Useful Plugins","text":"<p>Install plugins via Settings &gt; Plugins: - Markdown: Enhanced markdown editing - CSV Plugin: Better CSV file handling - Requirements: Requirements.txt management - .ignore: Gitignore file support</p>"},{"location":"dev-guide/getting-started/ide_setup/#when-to-use-pycharm","title":"When to Use PyCharm","text":"<ul> <li>You want a full-featured Python IDE</li> <li>Working on large, complex projects</li> <li>Need advanced debugging and profiling tools</li> <li>Prefer integrated database and web development tools</li> <li>Want comprehensive code analysis and refactoring</li> </ul>"},{"location":"dev-guide/getting-started/ide_setup/#installation_1","title":"Installation","text":"<ol> <li>Visit the Visual Studio Code website</li> <li>Download the installer for your operating system</li> <li>Run the installer and follow the setup prompts</li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#essential-extensions","title":"Essential Extensions","text":"<p>Install these extensions for Python development:</p> <ol> <li> <p>Python Extension Pack (includes multiple Python-related extensions):</p> <ul> <li>Python (by Microsoft)</li> <li>Pylance (language server)</li> <li>Python Debugger</li> <li>Jupyter</li> </ul> </li> <li> <p>Additional Recommended Extensions:</p> <ul> <li>GitLens: Enhanced Git capabilities</li> <li>Markdown All in One: Markdown editing support</li> <li>autoDocstring: Automatic docstring generation</li> <li>Black Formatter: Code formatting</li> <li>isort: Import sorting</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#python-environment-configuration","title":"Python Environment Configuration","text":"<ol> <li> <p>Select Python Interpreter:</p> <ul> <li>Press <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS)</li> <li>Type \"Python: Select Interpreter\"</li> <li>Choose from detected environments or browse to specific interpreter</li> </ul> </li> <li> <p>Configure for Different Environment Managers:</p> <ul> <li>Conda: VS Code automatically detects conda environments</li> <li>Poetry: Ensure poetry is in PATH, VS Code will detect poetry environments</li> <li>venv/virtualenv: Activate environment in terminal or select interpreter path</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#workspace-configuration","title":"Workspace Configuration","text":"<p>Create a <code>.vscode/settings.json</code> file in your project root:</p> <pre><code>{\n    \"python.defaultInterpreterPath\": \"./venv/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.pylintEnabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.formatting.blackArgs\": [\"--line-length\", \"88\"],\n    \"python.sortImports.args\": [\"--profile\", \"black\"],\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    },\n    \"files.exclude\": {\n        \"**/__pycache__\": true,\n        \"**/*.pyc\": true\n    }\n}\n</code></pre>"},{"location":"dev-guide/getting-started/ide_setup/#jupyter-notebook-integration","title":"Jupyter Notebook Integration","text":"<ol> <li>Install Jupyter Extension (included in Python Extension Pack)</li> <li> <p>Create/Open Notebooks:</p> <ul> <li>Create new <code>.ipynb</code> files</li> <li>Run cells interactively</li> <li>Variable explorer and debugging support</li> </ul> </li> <li> <p>Configure Jupyter Server:</p> <ul> <li>Use local Jupyter installation</li> <li>Connect to remote Jupyter servers</li> <li>Kernel selection and management</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#debugging-configuration","title":"Debugging Configuration","text":"<p>Create a <code>.vscode/launch.json</code> file for debugging:</p> <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": true\n        },\n        {\n            \"name\": \"Python: Module\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"module\": \"your_module_name\",\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": true\n        }\n    ]\n}\n</code></pre>"},{"location":"dev-guide/getting-started/ide_setup/#terminal-integration","title":"Terminal Integration","text":"<ol> <li> <p>Integrated Terminal:</p> <ul> <li>Access via <code>View &gt; Terminal</code> or `Ctrl+`` (backtick)</li> <li>Automatically activates Python environment</li> <li>Multiple terminal support</li> </ul> </li> <li> <p>Task Configuration:     Create <code>.vscode/tasks.json</code> for common tasks:     <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Run Tests\",\n            \"type\": \"shell\",\n            \"command\": \"python\",\n            \"args\": [\"-m\", \"pytest\"],\n            \"group\": \"test\"\n        },\n        {\n            \"label\": \"Format Code\",\n            \"type\": \"shell\",\n            \"command\": \"black\",\n            \"args\": [\".\"],\n            \"group\": \"build\"\n        }\n    ]\n}\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#when-to-use-visual-studio-code","title":"When to Use Visual Studio Code","text":"<ul> <li>You prefer a lightweight, fast editor</li> <li>Working with multiple programming languages</li> <li>Want extensive customization through extensions</li> <li>Need strong Git integration</li> <li>Prefer a more minimalist interface</li> </ul>"},{"location":"dev-guide/getting-started/ide_setup/#installation_2","title":"Installation","text":"<pre><code># Via pip\npip install jupyter\n\n# Via conda\nconda install jupyter\n\n# Via poetry\npoetry add jupyter\n</code></pre>"},{"location":"dev-guide/getting-started/ide_setup/#jupyterlab-vs-jupyter-notebook","title":"JupyterLab vs Jupyter Notebook","text":"<ul> <li>Jupyter Notebook: Classic notebook interface</li> <li>JupyterLab: Next-generation interface with enhanced features</li> </ul> <p>Install JupyterLab: <pre><code>pip install jupyterlab\n</code></pre></p>"},{"location":"dev-guide/getting-started/ide_setup/#running-jupyter","title":"Running Jupyter","text":"<pre><code># Start Jupyter Notebook\njupyter notebook\n\n# Start JupyterLab\njupyter lab\n</code></pre>"},{"location":"dev-guide/getting-started/ide_setup/#best-practices-for-jupyter","title":"Best Practices for Jupyter","text":"<ol> <li> <p>Version Control:</p> <ul> <li>Use <code>nbstripout</code> to remove output from notebooks before committing</li> <li>Consider using <code>jupytext</code> for better version control</li> </ul> </li> <li> <p>Environment Management:</p> <ul> <li>Install <code>ipykernel</code> in your environment</li> <li>Register kernel: <code>python -m ipykernel install --user --name myresearch</code></li> </ul> </li> <li> <p>Extensions:</p> <ul> <li>Variable Inspector: Monitor variables</li> <li>Table of Contents: Navigate large notebooks</li> <li>Code Folding: Organize code cells</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#when-to-use-jupyter","title":"When to Use Jupyter","text":"<ul> <li>Conducting exploratory data analysis</li> <li>Creating interactive reports and presentations</li> <li>Prototyping and experimenting with code</li> <li>Teaching or learning Python concepts</li> <li>Need to combine code, visualizations, and documentation</li> </ul>"},{"location":"dev-guide/getting-started/ide_setup/#general-setup-tips","title":"General Setup Tips","text":"<ol> <li> <p>Consistent Configuration:</p> <ul> <li>Use configuration files (<code>.editorconfig</code>, <code>pyproject.toml</code>)</li> <li>Share settings across team members</li> </ul> </li> <li> <p>Code Quality Tools:</p> <ul> <li>Set up linting (pylint, flake8)</li> <li>Configure formatting (black, autopep8)</li> <li>Enable type checking (mypy)</li> </ul> </li> <li> <p>Keyboard Shortcuts:</p> <ul> <li>Learn essential shortcuts for your chosen IDE</li> <li>Customize shortcuts for frequently used actions</li> </ul> </li> <li> <p>Backup and Sync:</p> <ul> <li>Use cloud sync for settings (VS Code Settings Sync, PyCharm Settings Repository)</li> <li>Regular backup of custom configurations</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/ide_setup/#official-resources","title":"Official Resources","text":"<ul> <li>PyCharm</li> <li>Visual Studio Code</li> <li>Project Jupyter</li> </ul>"},{"location":"dev-guide/getting-started/intro/","title":"Getting Started","text":"<p>Setting up a consistent and reproducible development environment is crucial for conducting reproducible research.</p> <p>This guide provides an overview of the essential components needed for a robust research environment.</p>"},{"location":"dev-guide/getting-started/intro/#overview","title":"Overview","text":"<p>To establish a productive research environment, you'll need to set up three key components:</p> <ol> <li>Python Environment Management - Tools to manage Python installations, packages, and virtual environments</li> <li>Integrated Development Environment (IDE) - Software to write, debug, and manage your code effectively</li> <li>Version Control System - Tools to track changes, collaborate, and ensure reproducibility</li> </ol>"},{"location":"dev-guide/getting-started/intro/#quick-start-guide","title":"Quick Start Guide","text":"<p>For detailed instructions on each component, please refer to the dedicated guides:</p>"},{"location":"dev-guide/getting-started/intro/#1-python-environment-management","title":"1. Python Environment Management","text":"<p>\u2192 Python Management Guide</p> <p>Learn how to set up and manage Python environments using: - Conda - Popular for scientific computing with pre-compiled packages - uv - Fast, modern Python package manager written in Rust - Poetry - Sophisticated dependency management and packaging tool</p> <p>Choose the tool that best fits your workflow and project requirements.</p>"},{"location":"dev-guide/getting-started/intro/#2-ide-setup","title":"2. IDE Setup","text":"<p>\u2192 IDE Setup Guide</p> <p>Configure your development environment with: - PyCharm - Full-featured Python IDE with advanced debugging and analysis - Visual Studio Code - Lightweight, extensible editor with excellent Python support - Jupyter - Interactive notebook environment for exploratory research</p> <p>Each IDE offers unique advantages depending on your coding style and project needs.</p>"},{"location":"dev-guide/getting-started/intro/#3-version-control","title":"3. Version Control","text":"<p>\u2192 Version Control Guide</p> <p>Master Git and GitHub for: - Tracking changes in your research code - Collaborating with team members - Ensuring reproducible research practices - Managing project history and releases</p> <p>Version control is essential for maintaining research integrity and enabling collaboration.</p>"},{"location":"dev-guide/getting-started/intro/#recommended-setup-path","title":"Recommended Setup Path","text":"<p>For new researchers, we recommend this setup sequence:</p> <ol> <li>Start with Python Management: Choose and install one environment manager (Conda is often easiest for beginners)</li> <li>Set up your IDE: Install and configure either PyCharm or VS Code based on your preferences</li> <li>Initialize Version Control: Set up Git and create your first repository on GitHub</li> <li>Create your first project: Apply all three components in a simple research project</li> </ol>"},{"location":"dev-guide/getting-started/intro/#integration-tips","title":"Integration Tips","text":"<p>These tools work best when used together: - Configure your IDE to recognize your Python environments - Set up your IDE's Git integration for seamless version control - Use environment files (<code>environment.yml</code>, <code>pyproject.toml</code>) that are tracked in version control - Establish consistent project structures across all your research projects</p>"},{"location":"dev-guide/getting-started/intro/#best-practices","title":"Best Practices","text":""},{"location":"dev-guide/getting-started/intro/#general-setup-tips","title":"General Setup Tips","text":"<ol> <li>Always use virtual environments to isolate project dependencies</li> <li>Pin dependency versions for reproducibility</li> <li>Document your environment setup in your project README</li> <li>Use lock files (<code>poetry.lock</code>, <code>conda-lock</code>) when available</li> <li>Keep development and production dependencies separate</li> <li>Regularly update dependencies while testing for compatibility</li> </ol>"},{"location":"dev-guide/getting-started/intro/#reproducibility-tips","title":"Reproducibility Tips","text":"<ul> <li>Include environment files (<code>environment.yml</code>, <code>pyproject.toml</code>, <code>requirements.txt</code>) in version control</li> <li>Document the Python version and environment manager used</li> <li>Consider using Docker for ultimate reproducibility</li> <li>Test your environment setup on different machines</li> </ul>"},{"location":"dev-guide/getting-started/intro/#additional-resources","title":"Additional Resources","text":""},{"location":"dev-guide/getting-started/intro/#quick-reference","title":"Quick Reference","text":"<ul> <li>Cheat Sheets - Quick reference guides for Conda, Git, and GitHub</li> </ul>"},{"location":"dev-guide/getting-started/intro/#reproducible-research","title":"Reproducible Research","text":"<ul> <li>The Turing Way - Comprehensive guide to reproducible research</li> <li>Software Carpentry - Foundational programming and data science skills</li> </ul>"},{"location":"dev-guide/getting-started/intro/#development-best-practices","title":"Development Best Practices","text":"<ul> <li>Clean Code Principles - Writing maintainable and readable research code</li> <li>PEP 8 - Python style guide for consistent code formatting</li> <li>Semantic Versioning - Version numbering best practices</li> </ul>"},{"location":"dev-guide/getting-started/intro/#community-and-support","title":"Community and Support","text":"<ul> <li>Python.org - Official Python documentation and resources</li> <li>Stack Overflow - Community-driven Q&amp;A for programming questions</li> <li>GitHub Community - Best practices for using GitHub effectively</li> </ul>"},{"location":"dev-guide/getting-started/intro/#next-steps","title":"Next Steps","text":"<p>Once you've completed the basic setup:</p> <ol> <li>Practice with a sample project - Create a small research project to test your environment</li> <li>Explore advanced features - Dive deeper into the specific tools you've chosen</li> <li>Join the community - Participate in relevant online communities and forums</li> <li>Keep learning - Stay updated with new tools and best practices in research computing</li> </ol> <p>Remember: The goal is to create a reproducible, collaborative, and efficient research environment that supports your scientific work.</p>"},{"location":"dev-guide/getting-started/python_management/","title":"Python Environment Management","text":"<p>Setting up a consistent and reproducible Python environment is crucial for conducting reproducible research. This guide covers four popular Python environment management approaches, organized by tool for easy navigation.</p> pip + venvCondauvPoetry <p>The native Python approach using <code>pip</code> (Python's package installer) and <code>venv</code> (Python's built-in virtual environment module). This is the most basic and widely supported method.</p> <p>Miniconda is a popular distribution system for Python and R, designed for scientific computing. It simplifies package management and deployment.</p> <p>uv is an extremely fast Python package installer and resolver, written in Rust. It's designed as a drop-in replacement for pip and pip-tools.</p> <p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and manages them for you.</p>"},{"location":"dev-guide/getting-started/python_management/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.3+ (venv is included in the standard library)</li> <li>pip (usually comes with Python installations)</li> </ul>"},{"location":"dev-guide/getting-started/python_management/#creating-a-virtual-environment","title":"Creating a Virtual Environment","text":"<ol> <li> <p>Navigate to your project directory:     <pre><code>cd /path/to/your/project\n</code></pre></p> </li> <li> <p>Create a virtual environment:     <pre><code>python -m venv myresearch\n</code></pre></p> <p>Or specify a Python version (if you have multiple versions): <pre><code>python3.9 -m venv myresearch\n</code></pre></p> </li> <li> <p>Activate the environment:</p> <ul> <li>Unix/macOS: <pre><code>source myresearch/bin/activate\n</code></pre></li> <li>Windows: <pre><code>myresearch\\Scripts\\activate\n</code></pre></li> </ul> </li> <li> <p>Verify activation (you should see the environment name in your prompt):     <pre><code>which python  # Unix/macOS\nwhere python  # Windows\n</code></pre></p> </li> <li> <p>Upgrade pip (recommended):     <pre><code>python -m pip install --upgrade pip\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/getting-started/python_management/#installing-packages","title":"Installing Packages","text":"<p>With the virtual environment activated:</p> <pre><code># Install individual packages\npip install numpy pandas matplotlib scipy\n\n# Install from requirements file\npip install -r requirements.txt\n\n# Install in development mode (for your own package)\npip install -e .\n</code></pre>"},{"location":"dev-guide/getting-started/python_management/#managing-dependencies","title":"Managing Dependencies","text":""},{"location":"dev-guide/getting-started/python_management/#creating-requirements-files","title":"Creating Requirements Files","text":"<p>Generate a requirements file with exact versions: <pre><code>pip freeze &gt; requirements.txt\n</code></pre></p> <p>Create a more flexible requirements file manually: <pre><code># requirements.txt\nnumpy&gt;=1.21.0\npandas&gt;=1.3.0\nmatplotlib&gt;=3.4.0\nscipy&gt;=1.7.0\nrequests&gt;=2.25.0\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#development-dependencies","title":"Development Dependencies","text":"<p>Keep development tools separate: <pre><code># requirements-dev.txt\npytest&gt;=6.2.0\nblack&gt;=21.0.0\nflake8&gt;=3.9.0\nmypy&gt;=0.910\njupyter&gt;=1.0.0\n</code></pre></p> <p>Install development dependencies: <pre><code>pip install -r requirements-dev.txt\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#using-pip-tools-for-better-dependency-management","title":"Using pip-tools for Better Dependency Management","text":"<p>Install pip-tools for more sophisticated dependency management: <pre><code>pip install pip-tools\n</code></pre></p> <p>Create a <code>requirements.in</code> file with high-level dependencies: <pre><code># requirements.in\nnumpy\npandas\nmatplotlib\nscipy\nrequests\n</code></pre></p> <p>Generate a locked requirements file: <pre><code>pip-compile requirements.in\n</code></pre></p> <p>This creates <code>requirements.txt</code> with pinned versions for reproducibility.</p>"},{"location":"dev-guide/getting-started/python_management/#deactivating-and-removing-environments","title":"Deactivating and Removing Environments","text":""},{"location":"dev-guide/getting-started/python_management/#deactivate","title":"Deactivate","text":"<pre><code>deactivate\n</code></pre>"},{"location":"dev-guide/getting-started/python_management/#remove-environment","title":"Remove Environment","text":"<p>Simply delete the environment directory: <pre><code>rm -rf myresearch  # Unix/macOS\nrmdir /s myresearch  # Windows\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#project-structure-example","title":"Project Structure Example","text":"<pre><code>myresearch/\n\u251c\u2500\u2500 myresearch/          # Virtual environment (don't commit to git)\n\u251c\u2500\u2500 src/                 # Source code\n\u251c\u2500\u2500 tests/               # Test files\n\u251c\u2500\u2500 data/                # Data files\n\u251c\u2500\u2500 notebooks/           # Jupyter notebooks\n\u251c\u2500\u2500 requirements.txt     # Production dependencies\n\u251c\u2500\u2500 requirements-dev.txt # Development dependencies\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .gitignore          # Include myresearch/ here\n</code></pre>"},{"location":"dev-guide/getting-started/python_management/#when-to-use-pip-venv","title":"When to Use pip + venv","text":"<ul> <li>Learning Python or starting with Python development</li> <li>Working with pure Python packages</li> <li>Need maximum compatibility across systems</li> <li>Want to understand the basics of Python packaging</li> <li>Working in environments where conda/poetry aren't available</li> <li>Simple projects with straightforward dependencies</li> </ul>"},{"location":"dev-guide/getting-started/python_management/#advantages","title":"Advantages","text":"<ul> <li>Built-in: No additional tools to install</li> <li>Universal: Works everywhere Python works</li> <li>Simple: Straightforward workflow</li> <li>Lightweight: Minimal overhead</li> <li>Educational: Helps understand Python packaging</li> </ul>"},{"location":"dev-guide/getting-started/python_management/#limitations","title":"Limitations","text":"<ul> <li>Manual dependency resolution: No automatic conflict resolution</li> <li>No binary package management: Relies on PyPI wheels</li> <li>Basic environment management: Less sophisticated than alternatives</li> <li>No built-in project management: Requires manual setup</li> </ul>"},{"location":"dev-guide/getting-started/python_management/#installation","title":"Installation","text":""},{"location":"dev-guide/getting-started/python_management/#miniconda-traditional","title":"Miniconda (Traditional)","text":"<ol> <li>Visit the Miniconda website and download the appropriate installer.</li> <li>Run the installer and follow the prompts.</li> <li>Miniconda provides a base Python installation with conda package manager.</li> </ol>"},{"location":"dev-guide/getting-started/python_management/#mamba-faster-alternative","title":"Mamba (Faster Alternative)","text":"<p>Mamba is a fast, robust, and cross-platform package manager that's a drop-in replacement for conda. It uses the same commands and configuration files as conda but is significantly faster.</p> <p>Install Mamba: <pre><code># Option 1: Install mamba in base environment\nconda install -n base -c conda-forge mamba\n\n# Option 2: Install Mambaforge (recommended for new installations)\n# Download from: https://github.com/conda-forge/miniforge#mambaforge\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#creating-a-conda-environment","title":"Creating a Conda Environment","text":"<p>After installing Miniconda or Mambaforge, create a new environment for your research project:</p> <ol> <li>Open a terminal (or Anaconda Prompt on Windows).</li> <li> <p>Create a new environment named <code>myresearch</code> with Python 3.9:</p> <p>Using conda: <pre><code>conda create --name myresearch python=3.9\n</code></pre></p> <p>Using mamba (faster): <pre><code>mamba create --name myresearch python=3.9\n</code></pre></p> </li> <li> <p>Activate the environment:     <pre><code>conda activate myresearch\n# or\nmamba activate myresearch\n</code></pre></p> </li> <li> <p>Install necessary packages:</p> <p>Using conda: <pre><code>conda install numpy pandas matplotlib scipy\n</code></pre></p> <p>Using mamba (faster): <pre><code>mamba install numpy pandas matplotlib scipy\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/getting-started/python_management/#managing-dependencies_1","title":"Managing Dependencies","text":"<p>Create an <code>environment.yml</code> file to track your dependencies:</p> <pre><code>name: myresearch\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - python=3.9\n  - numpy\n  - pandas\n  - matplotlib\n  - scipy\n  - pip\n  - pip:\n    - some-pip-only-package\n</code></pre> <p>Recreate the environment from the file:</p> <p>Using conda: <pre><code>conda env create -f environment.yml\n</code></pre></p> <p>Using mamba (faster): <pre><code>mamba env create -f environment.yml\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#mamba-vs-conda","title":"Mamba vs Conda","text":"<p>Mamba advantages: - Speed: 5-10x faster package resolution and installation - Better error messages: More informative when conflicts occur - Parallel downloads: Downloads packages in parallel - Same interface: Drop-in replacement for conda commands - Better dependency solving: More robust solver algorithm</p> <p>When to use Mamba: - Large environments with many packages - Frequent package installations/updates - Complex dependency resolution scenarios - When conda feels slow</p> <p>Mamba command equivalents: <pre><code># Replace 'conda' with 'mamba' in any command\nmamba install package_name\nmamba create -n env_name python=3.9\nmamba env export &gt; environment.yml\nmamba list\nmamba search package_name\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#when-to-use-condamamba","title":"When to Use Conda/Mamba","text":"<ul> <li>Working with scientific computing packages</li> <li>Need packages from multiple languages (Python, R, C++)</li> <li>Working with complex binary dependencies</li> <li>Need pre-compiled packages for performance</li> <li>Large environments with many packages (prefer mamba)</li> </ul>"},{"location":"dev-guide/getting-started/python_management/#installation_1","title":"Installation","text":"<p>Install uv using pip: <pre><code>pip install uv\n</code></pre></p> <p>Or using curl (on Unix systems): <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#creating-a-virtual-environment_1","title":"Creating a Virtual Environment","text":"<ol> <li> <p>Create a new virtual environment:     <pre><code>uv venv myresearch\n</code></pre></p> </li> <li> <p>Activate the environment:</p> <ul> <li>On Unix/macOS: <code>source myresearch/bin/activate</code></li> <li>On Windows: <code>myresearch\\Scripts\\activate</code></li> </ul> </li> <li> <p>Install packages:     <pre><code>uv pip install numpy pandas matplotlib scipy\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/getting-started/python_management/#managing-dependencies_2","title":"Managing Dependencies","text":"<p>Create a <code>requirements.txt</code> file: <pre><code>uv pip freeze &gt; requirements.txt\n</code></pre></p> <p>Install from requirements: <pre><code>uv pip install -r requirements.txt\n</code></pre></p> <p>For development dependencies, use <code>requirements-dev.txt</code>: <pre><code>uv pip install -r requirements-dev.txt\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#when-to-use-uv","title":"When to Use uv","text":"<ul> <li>Want the fastest package installation</li> <li>Working primarily with pure Python packages</li> <li>Need a drop-in replacement for pip</li> <li>Want minimal overhead</li> </ul>"},{"location":"dev-guide/getting-started/python_management/#installation_2","title":"Installation","text":"<p>Install Poetry using the official installer: <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre></p> <p>Or using pip: <pre><code>pip install poetry\n</code></pre></p>"},{"location":"dev-guide/getting-started/python_management/#creating-a-new-project","title":"Creating a New Project","text":"<ol> <li> <p>Create a new project:     <pre><code>poetry new myresearch\ncd myresearch\n</code></pre></p> </li> <li> <p>Or initialize Poetry in an existing project:     <pre><code>cd myresearch\npoetry init\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/getting-started/python_management/#managing-dependencies_3","title":"Managing Dependencies","text":"<ol> <li> <p>Add dependencies:     <pre><code>poetry add numpy pandas matplotlib scipy\n</code></pre></p> </li> <li> <p>Add development dependencies:     <pre><code>poetry add --group dev pytest black flake8\n</code></pre></p> </li> <li> <p>Install all dependencies:     <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Activate the virtual environment:     <pre><code>poetry shell\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/getting-started/python_management/#configuration-file","title":"Configuration File","text":"<p>Poetry uses <code>pyproject.toml</code> to manage project configuration:</p> <pre><code>[tool.poetry]\nname = \"myresearch\"\nversion = \"0.1.0\"\ndescription = \"My research project\"\nauthors = [\"Your Name &lt;your.email@example.com&gt;\"]\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\nnumpy = \"^1.21.0\"\npandas = \"^1.3.0\"\nmatplotlib = \"^3.4.0\"\nscipy = \"^1.7.0\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^6.2.0\"\nblack = \"^21.0.0\"\nflake8 = \"^3.9.0\"\n\n[build-system]\nrequires = [\"poetry-core&gt;=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre>"},{"location":"dev-guide/getting-started/python_management/#when-to-use-poetry","title":"When to Use Poetry","text":"<ul> <li>Building distributable Python packages</li> <li>Need sophisticated dependency resolution</li> <li>Want integrated project management</li> <li>Prefer declarative dependency management</li> </ul>"},{"location":"dev-guide/getting-started/python_management/#best-practices","title":"Best Practices","text":"<ol> <li>Always use virtual environments to isolate project dependencies</li> <li>Pin dependency versions for reproducibility</li> <li>Document your environment setup in your project README</li> <li>Use lock files (<code>poetry.lock</code>, <code>conda-lock</code>) when available</li> <li>Keep development and production dependencies separate</li> <li>Regularly update dependencies while testing for compatibility</li> </ol>"},{"location":"dev-guide/getting-started/python_management/#reproducibility-tips","title":"Reproducibility Tips","text":"<ul> <li>Include environment files (<code>environment.yml</code>, <code>pyproject.toml</code>, <code>requirements.txt</code>) in version control</li> <li>Document the Python version and environment manager used</li> <li>Consider using Docker for ultimate reproducibility</li> <li>Test your environment setup on different machines</li> </ul>"},{"location":"dev-guide/getting-started/version_control/","title":"Version Control with Git and GitHub","text":"<p>Version control is essential for reproducible research, allowing you to track changes, collaborate with others, and maintain a history of your project. This guide covers Git fundamentals and GitHub integration for research projects.</p>"},{"location":"dev-guide/getting-started/version_control/#installation","title":"Installation","text":"WindowsmacOSLinux"},{"location":"dev-guide/getting-started/version_control/#git-for-windows","title":"Git for Windows","text":"<ul> <li>Download from git-scm.com</li> <li>Run the installer and follow the setup wizard</li> <li>Choose your preferred options (recommended: use Git from command line and 3rd-party software)</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#package-manager","title":"Package Manager","text":"<pre><code># Using winget\nwinget install Git.Git\n\n# Using Chocolatey\nchoco install git\n\n# Using Scoop\nscoop install git\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#homebrew-recommended","title":"Homebrew (Recommended)","text":"<pre><code>brew install git\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#direct-download","title":"Direct Download","text":"<ul> <li>Download from git-scm.com</li> <li>Run the installer package</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#xcode-command-line-tools","title":"Xcode Command Line Tools","text":"<p><pre><code>xcode-select --install\n</code></pre> This installs Git along with other development tools.</p>"},{"location":"dev-guide/getting-started/version_control/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code>sudo apt update\nsudo apt install git\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#centosrhelfedora","title":"CentOS/RHEL/Fedora","text":"<pre><code># CentOS/RHEL 7\nsudo yum install git\n\n# CentOS/RHEL 8+ / Fedora\nsudo dnf install git\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#arch-linux","title":"Arch Linux","text":"<pre><code>sudo pacman -S git\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#opensuse","title":"openSUSE","text":"<pre><code>sudo zypper install git\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#git-fundamentals","title":"Git Fundamentals","text":"<p>Git is a distributed version control system that tracks changes in your files and coordinates work between multiple people.</p>"},{"location":"dev-guide/getting-started/version_control/#initial-configuration","title":"Initial Configuration","text":"<p>Set up your identity (required for commits):</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre> <p>Optional but recommended configurations: <pre><code># Set default branch name\ngit config --global init.defaultBranch main\n\n# Enable colored output\ngit config --global color.ui auto\n\n# Set default editor\ngit config --global core.editor \"code --wait\"  # VS Code\n# git config --global core.editor \"nano\"       # Nano\n</code></pre></p>"},{"location":"dev-guide/getting-started/version_control/#repository-initialization","title":"Repository Initialization","text":""},{"location":"dev-guide/getting-started/version_control/#starting-a-new-repository","title":"Starting a New Repository","text":"<ol> <li> <p>Initialize in existing project:     <pre><code>cd your-project-directory\ngit init\n</code></pre></p> </li> <li> <p>Clone existing repository:     <pre><code>git clone https://github.com/username/repository-name.git\ncd repository-name\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/getting-started/version_control/#basic-git-workflow","title":"Basic Git Workflow","text":""},{"location":"dev-guide/getting-started/version_control/#1-check-status","title":"1. Check Status","text":"<pre><code>git status\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#2-stage-changes","title":"2. Stage Changes","text":"<pre><code># Stage specific files\ngit add filename.py\n\n# Stage all changes\ngit add .\n\n# Stage all Python files\ngit add *.py\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#3-commit-changes","title":"3. Commit Changes","text":"<pre><code># Commit with message\ngit commit -m \"Add data analysis functions\"\n\n# Commit with detailed message\ngit commit -m \"Add data analysis functions\n\n- Implement statistical summary functions\n- Add data visualization utilities\n- Include unit tests for new functions\"\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#4-view-history","title":"4. View History","text":"<pre><code># View commit history\ngit log\n\n# Compact view\ngit log --oneline\n\n# Graphical view\ngit log --graph --oneline --all\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#working-with-branches","title":"Working with Branches","text":"<p>Branches allow you to work on different features or experiments without affecting the main codebase.</p> <pre><code># Create and switch to new branch\ngit checkout -b feature-analysis\n\n# Or using newer syntax\ngit switch -c feature-analysis\n\n# List branches\ngit branch\n\n# Switch branches\ngit checkout main\ngit switch main\n\n# Merge branch\ngit checkout main\ngit merge feature-analysis\n\n# Delete branch\ngit branch -d feature-analysis\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#gitignore-file","title":".gitignore File","text":"<p>Create a <code>.gitignore</code> file to exclude files that shouldn't be tracked:</p> <pre><code># Python\n__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Virtual environments\nvenv/\nenv/\nENV/\n.venv/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# Data files (be selective)\n*.csv\n*.xlsx\n*.json\ndata/raw/\ndata/processed/\n\n# OS generated files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Research specific\n*.log\nresults/\nfigures/\n*.pdf\n</code></pre> <p>Use gitignore.io to generate comprehensive <code>.gitignore</code> files.</p>"},{"location":"dev-guide/getting-started/version_control/#advanced-git-topics","title":"Advanced Git Topics","text":""},{"location":"dev-guide/getting-started/version_control/#resolving-merge-conflicts","title":"Resolving Merge Conflicts","text":"<pre><code># When conflicts occur during merge\ngit status                    # See conflicted files\n# Edit files to resolve conflicts\ngit add resolved-file.py\ngit commit\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#undoing-changes","title":"Undoing Changes","text":"<pre><code># Unstage file\ngit reset HEAD filename.py\n\n# Discard local changes\ngit checkout -- filename.py\n\n# Undo last commit (keep changes)\ngit reset --soft HEAD~1\n\n# Undo last commit (discard changes)\ngit reset --hard HEAD~1\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#stashing-changes","title":"Stashing Changes","text":"<pre><code># Stash current changes\ngit stash\n\n# Apply stashed changes\ngit stash pop\n\n# List stashes\ngit stash list\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#github-integration","title":"GitHub Integration","text":"<p>GitHub is a web-based hosting service for Git repositories, providing collaboration tools, issue tracking, and project management features.</p>"},{"location":"dev-guide/getting-started/version_control/#setting-up-github","title":"Setting Up GitHub","text":"<ol> <li>Create Account: Visit github.com and sign up</li> <li> <p>Set up SSH Keys (recommended for security):</p> <pre><code># Generate SSH key\nssh-keygen -t ed25519 -C \"your.email@example.com\"\n\n# Start SSH agent\neval \"$(ssh-agent -s)\"\n\n# Add key to agent\nssh-add ~/.ssh/id_ed25519\n\n# Copy public key to clipboard\ncat ~/.ssh/id_ed25519.pub\n</code></pre> </li> <li> <p>Add SSH Key to GitHub:</p> <ul> <li>Go to GitHub Settings &gt; SSH and GPG keys</li> <li>Click \"New SSH key\"</li> <li>Paste your public key</li> </ul> </li> </ol>"},{"location":"dev-guide/getting-started/version_control/#creating-a-repository-on-github","title":"Creating a Repository on GitHub","text":""},{"location":"dev-guide/getting-started/version_control/#method-1-create-on-github-first","title":"Method 1: Create on GitHub First","text":"<ol> <li>Go to GitHub and click \"New repository\"</li> <li>Fill in repository details</li> <li>Clone to your local machine:     <pre><code>git clone git@github.com:username/repository-name.git\n</code></pre></li> </ol>"},{"location":"dev-guide/getting-started/version_control/#method-2-push-existing-local-repository","title":"Method 2: Push Existing Local Repository","text":"<ol> <li>Create empty repository on GitHub (don't initialize with README)</li> <li>Add remote origin:     <pre><code>git remote add origin git@github.com:username/repository-name.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"dev-guide/getting-started/version_control/#working-with-remotes","title":"Working with Remotes","text":"<pre><code># View remotes\ngit remote -v\n\n# Add remote\ngit remote add upstream git@github.com:original-owner/repository.git\n\n# Fetch changes\ngit fetch origin\n\n# Pull changes (fetch + merge)\ngit pull origin main\n\n# Push changes\ngit push origin main\n\n# Push new branch\ngit push -u origin feature-branch\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#collaboration-workflow","title":"Collaboration Workflow","text":""},{"location":"dev-guide/getting-started/version_control/#fork-and-pull-request-model","title":"Fork and Pull Request Model","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork:     <pre><code>git clone git@github.com:yourusername/repository.git\n</code></pre></li> <li>Add upstream remote:     <pre><code>git remote add upstream git@github.com:originalowner/repository.git\n</code></pre></li> <li>Create feature branch:     <pre><code>git checkout -b feature-improvement\n</code></pre></li> <li>Make changes and commit</li> <li>Push to your fork:     <pre><code>git push origin feature-improvement\n</code></pre></li> <li>Create Pull Request on GitHub</li> </ol>"},{"location":"dev-guide/getting-started/version_control/#keeping-fork-updated","title":"Keeping Fork Updated","text":"<pre><code># Fetch upstream changes\ngit fetch upstream\n\n# Switch to main branch\ngit checkout main\n\n# Merge upstream changes\ngit merge upstream/main\n\n# Push updates to your fork\ngit push origin main\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#github-features-for-research","title":"GitHub Features for Research","text":""},{"location":"dev-guide/getting-started/version_control/#issues-and-project-management","title":"Issues and Project Management","text":"<ul> <li>Issues: Track bugs, feature requests, and tasks</li> <li>Labels: Categorize issues (bug, enhancement, documentation)</li> <li>Milestones: Group issues for releases or project phases</li> <li>Projects: Kanban-style project management</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#documentation","title":"Documentation","text":"<ul> <li>README.md: Project overview and setup instructions</li> <li>Wiki: Detailed documentation</li> <li>GitHub Pages: Host project websites</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#releases-and-tags","title":"Releases and Tags","text":"<pre><code># Create tag\ngit tag -a v1.0.0 -m \"First release\"\n\n# Push tags\ngit push origin --tags\n</code></pre> <p>Create releases on GitHub to distribute your research code.</p>"},{"location":"dev-guide/getting-started/version_control/#github-actions-cicd","title":"GitHub Actions (CI/CD)","text":"<p>Create <code>.github/workflows/tests.yml</code> for automated testing:</p> <pre><code>name: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, '3.10']\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install pytest\n    - name: Run tests\n      run: pytest\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#best-practices","title":"Best Practices","text":""},{"location":"dev-guide/getting-started/version_control/#repository-structure","title":"Repository Structure","text":"<pre><code>research-project/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 requirements.txt          # or pyproject.toml\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 raw/                 # Original, immutable data\n\u2502   \u251c\u2500\u2500 processed/           # Cleaned, processed data\n\u2502   \u2514\u2500\u2500 external/            # External datasets\n\u251c\u2500\u2500 notebooks/               # Jupyter notebooks\n\u2502   \u251c\u2500\u2500 exploratory/\n\u2502   \u2514\u2500\u2500 reports/\n\u251c\u2500\u2500 src/                     # Source code\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 data/               # Data processing\n\u2502   \u251c\u2500\u2500 features/           # Feature engineering\n\u2502   \u251c\u2500\u2500 models/             # Model definitions\n\u2502   \u2514\u2500\u2500 visualization/      # Plotting functions\n\u251c\u2500\u2500 tests/                  # Unit tests\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 results/                # Model outputs, figures\n\u2514\u2500\u2500 scripts/                # Utility scripts\n</code></pre>"},{"location":"dev-guide/getting-started/version_control/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>Use conventional commit format: <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre></p> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Adding tests - <code>chore</code>: Maintenance tasks</p> <p>Examples: <pre><code>git commit -m \"feat(analysis): add statistical summary functions\"\ngit commit -m \"fix(data): handle missing values in preprocessing\"\ngit commit -m \"docs: update installation instructions\"\n</code></pre></p>"},{"location":"dev-guide/getting-started/version_control/#data-management","title":"Data Management","text":""},{"location":"dev-guide/getting-started/version_control/#large-files","title":"Large Files","text":"<ul> <li> <p>Use Git LFS (Large File Storage) for large datasets:   <pre><code>git lfs install\ngit lfs track \"*.csv\"\ngit lfs track \"*.xlsx\"\ngit add .gitattributes\n</code></pre></p> </li> <li> <p>Consider external storage (cloud services, institutional repositories)</p> </li> <li>Document data sources and access methods</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#sensitive-data","title":"Sensitive Data","text":"<ul> <li>Never commit sensitive data (passwords, API keys, personal data)</li> <li>Use environment variables or config files (excluded from Git)</li> <li>Consider data anonymization techniques</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#reproducibility","title":"Reproducibility","text":""},{"location":"dev-guide/getting-started/version_control/#environment-documentation","title":"Environment Documentation","text":"<ul> <li>Include <code>requirements.txt</code>, <code>environment.yml</code>, or <code>pyproject.toml</code></li> <li>Document Python version and OS requirements</li> <li>Consider using Docker for complete environment specification</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#code-organization","title":"Code Organization","text":"<ul> <li>Write modular, reusable functions</li> <li>Include docstrings and comments</li> <li>Separate data processing, analysis, and visualization</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#documentation_1","title":"Documentation","text":"<ul> <li>Maintain comprehensive README with:</li> <li>Project description and objectives</li> <li>Installation and setup instructions</li> <li>Usage examples</li> <li>Data sources and methodology</li> <li>Results and conclusions</li> </ul>"},{"location":"dev-guide/getting-started/version_control/#collaboration-guidelines","title":"Collaboration Guidelines","text":"<ol> <li>Establish workflow: Agree on branching strategy and review process</li> <li>Code review: Use pull requests for all changes</li> <li>Issue tracking: Document bugs, features, and discussions</li> <li>Communication: Use clear commit messages and PR descriptions</li> <li>Testing: Implement automated tests where possible</li> </ol>"},{"location":"dev-guide/getting-started/version_control/#resources","title":"Resources","text":"<ul> <li>Pro Git Book - Comprehensive Git documentation</li> <li>GitHub Guides - GitHub-specific tutorials</li> <li>Git Cheat Sheet</li> <li>Conventional Commits</li> <li>gitignore.io - Generate .gitignore files</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/machine-learning/","title":"Machine Learning","text":""},{"location":"blog/category/winter-20252026/","title":"Winter 2025/2026","text":""}]}